{
    "openapi": "3.0.3",
    "info": {
        "title": "DZ Bus Tracker API",
        "version": "1.0.0 (v1)",
        "description": "Real-time bus tracking system for Algeria"
    },
    "paths": {
        "/api/token/": {
            "post": {
                "operationId": "api_token_create",
                "description": "JWT token view that accepts email instead of username.",
                "tags": [
                    "api"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EmailTokenObtainPairRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/EmailTokenObtainPairRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/EmailTokenObtainPairRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmailTokenObtainPair"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/token/refresh/": {
            "post": {
                "operationId": "api_token_refresh_create",
                "description": "Takes a refresh type JSON web token and returns an access type JSON web\ntoken if the refresh token is valid.",
                "tags": [
                    "api"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenRefreshRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenRefreshRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenRefreshRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TokenRefresh"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/token/verify/": {
            "post": {
                "operationId": "api_token_verify_create",
                "description": "Takes a token and indicates if it is valid.  This view provides no\ninformation about a token's fitness for a particular use.",
                "tags": [
                    "api"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenVerifyRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenVerifyRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenVerifyRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/accounts/login/": {
            "post": {
                "operationId": "accounts_login_create",
                "description": "Login a user.",
                "tags": [
                    "accounts"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/accounts/profile/": {
            "get": {
                "operationId": "accounts_profile_retrieve",
                "description": "Get the current user's profile.",
                "tags": [
                    "accounts"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Profile"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/accounts/profiles/": {
            "get": {
                "operationId": "accounts_profiles_list",
                "description": "API endpoint for profiles.",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "accounts"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedProfileList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "accounts_profiles_create",
                "description": "API endpoint for profiles.",
                "tags": [
                    "accounts"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProfileRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ProfileRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ProfileRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Profile"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/accounts/profiles/{id}/": {
            "get": {
                "operationId": "accounts_profiles_retrieve",
                "description": "API endpoint for profiles.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this profile.",
                        "required": true
                    }
                ],
                "tags": [
                    "accounts"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Profile"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "accounts_profiles_partial_update",
                "description": "API endpoint for profiles.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this profile.",
                        "required": true
                    }
                ],
                "tags": [
                    "accounts"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedProfileUpdateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedProfileUpdateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedProfileUpdateRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProfileUpdate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "accounts_profiles_destroy",
                "description": "API endpoint for profiles.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this profile.",
                        "required": true
                    }
                ],
                "tags": [
                    "accounts"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/accounts/profiles/me/": {
            "get": {
                "operationId": "accounts_profiles_me_retrieve",
                "description": "Get the current user's profile.",
                "tags": [
                    "accounts"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Profile"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/accounts/profiles/update_me/": {
            "patch": {
                "operationId": "accounts_profiles_update_me_partial_update",
                "description": "Update the current user's profile.",
                "tags": [
                    "accounts"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedProfileRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedProfileRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedProfileRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Profile"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/accounts/profiles/update_notification_preferences/": {
            "patch": {
                "operationId": "accounts_profiles_update_notification_preferences_partial_update",
                "description": "Update notification preferences.",
                "tags": [
                    "accounts"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedProfileRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedProfileRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedProfileRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Profile"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/accounts/register/": {
            "post": {
                "operationId": "accounts_register_create",
                "description": "Register a new user.",
                "tags": [
                    "accounts"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/accounts/register-driver/": {
            "post": {
                "operationId": "accounts_register_driver_create",
                "description": "Register a new driver with their driver information.",
                "tags": [
                    "accounts"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/accounts/users/": {
            "get": {
                "operationId": "accounts_users_list",
                "description": "API endpoint for users.",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "accounts"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedUserList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "accounts_users_create",
                "description": "API endpoint for users.",
                "tags": [
                    "accounts"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserCreateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/UserCreateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/UserCreateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {}
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserCreate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/accounts/users/{id}/": {
            "get": {
                "operationId": "accounts_users_retrieve",
                "description": "API endpoint for users.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this user.",
                        "required": true
                    }
                ],
                "tags": [
                    "accounts"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "accounts_users_partial_update",
                "description": "API endpoint for users.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this user.",
                        "required": true
                    }
                ],
                "tags": [
                    "accounts"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedUserUpdateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedUserUpdateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedUserUpdateRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserUpdate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "accounts_users_destroy",
                "description": "API endpoint for users.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this user.",
                        "required": true
                    }
                ],
                "tags": [
                    "accounts"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/accounts/users/{id}/change_password/": {
            "post": {
                "operationId": "accounts_users_change_password_create",
                "description": "Change user password.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this user.",
                        "required": true
                    }
                ],
                "tags": [
                    "accounts"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordChangeRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordChangeRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordChangeRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/accounts/users/logout/": {
            "post": {
                "operationId": "accounts_users_logout_create",
                "description": "Invalidate the refresh token.",
                "tags": [
                    "accounts"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/UserRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/UserRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/accounts/users/me/": {
            "get": {
                "operationId": "accounts_users_me_retrieve",
                "description": "Get the current user.",
                "tags": [
                    "accounts"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/accounts/users/reset_password_confirm/": {
            "post": {
                "operationId": "accounts_users_reset_password_confirm_create",
                "description": "Confirm a password reset.",
                "tags": [
                    "accounts"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordResetConfirmRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordResetConfirmRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordResetConfirmRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PasswordResetConfirm"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/accounts/users/reset_password_request/": {
            "post": {
                "operationId": "accounts_users_reset_password_request_create",
                "description": "Request a password reset.",
                "tags": [
                    "accounts"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordResetRequestRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordResetRequestRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordResetRequestRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PasswordResetRequest"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/buses/buses/": {
            "get": {
                "operationId": "buses_buses_list",
                "description": "API endpoint for buses.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "driver_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "is_active",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "is_air_conditioned",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "is_approved",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "license_plate",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "manufacturer",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "max_capacity",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "max_year",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "min_capacity",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "min_year",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "model",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "order_by",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "-created_at",
                                    "-updated_at",
                                    "created_at",
                                    "updated_at"
                                ]
                            }
                        },
                        "description": "Ordering\n\n* `created_at` - Created at\n* `-created_at` - Created at (décroissant)\n* `updated_at` - Updated at\n* `-updated_at` - Updated at (décroissant)",
                        "explode": false,
                        "style": "form"
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "year",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "buses"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedBusList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "buses_buses_create",
                "description": "API endpoint for buses.",
                "tags": [
                    "buses"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BusCreateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/BusCreateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/BusCreateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BusCreate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/buses/buses/{id}/": {
            "get": {
                "operationId": "buses_buses_retrieve",
                "description": "API endpoint for buses.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this bus.",
                        "required": true
                    }
                ],
                "tags": [
                    "buses"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Bus"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "buses_buses_partial_update",
                "description": "API endpoint for buses.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this bus.",
                        "required": true
                    }
                ],
                "tags": [
                    "buses"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedBusUpdateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedBusUpdateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedBusUpdateRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BusUpdate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "buses_buses_destroy",
                "description": "API endpoint for buses.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this bus.",
                        "required": true
                    }
                ],
                "tags": [
                    "buses"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/buses/buses/{id}/activate/": {
            "post": {
                "operationId": "buses_buses_activate_create",
                "description": "Activate a bus.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this bus.",
                        "required": true
                    }
                ],
                "tags": [
                    "buses"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BusRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/BusRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/BusRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Bus"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/buses/buses/{id}/approve/": {
            "post": {
                "operationId": "buses_buses_approve_create",
                "description": "Approve or reject a bus.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this bus.",
                        "required": true
                    }
                ],
                "tags": [
                    "buses"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BusApproveRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/BusApproveRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/BusApproveRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BusApprove"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/buses/buses/{id}/deactivate/": {
            "post": {
                "operationId": "buses_buses_deactivate_create",
                "description": "Deactivate a bus.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this bus.",
                        "required": true
                    }
                ],
                "tags": [
                    "buses"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BusRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/BusRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/BusRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Bus"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/buses/buses/{id}/start_tracking/": {
            "post": {
                "operationId": "buses_buses_start_tracking_create",
                "description": "Start tracking a bus.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this bus.",
                        "required": true
                    }
                ],
                "tags": [
                    "buses"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BusRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/BusRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/BusRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Bus"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/buses/buses/{id}/stop_tracking/": {
            "post": {
                "operationId": "buses_buses_stop_tracking_create",
                "description": "Stop tracking a bus.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this bus.",
                        "required": true
                    }
                ],
                "tags": [
                    "buses"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BusRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/BusRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/BusRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Bus"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/buses/buses/{id}/update_location/": {
            "post": {
                "operationId": "buses_buses_update_location_create",
                "description": "Update bus location.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this bus.",
                        "required": true
                    }
                ],
                "tags": [
                    "buses"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BusLocationUpdateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/BusLocationUpdateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/BusLocationUpdateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BusLocationUpdate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/buses/buses/{id}/update_passenger_count/": {
            "post": {
                "operationId": "buses_buses_update_passenger_count_create",
                "description": "Update passenger count.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this bus.",
                        "required": true
                    }
                ],
                "tags": [
                    "buses"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PassengerCountUpdateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PassengerCountUpdateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PassengerCountUpdateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PassengerCountUpdate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/buses/locations/": {
            "get": {
                "operationId": "buses_locations_list",
                "description": "API endpoint for bus locations.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "bus_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "created_after",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "in": "query",
                        "name": "created_before",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "in": "query",
                        "name": "is_tracking_active",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "max_passenger_count",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "max_speed",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "min_passenger_count",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "min_speed",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "order_by",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "-created_at",
                                    "-updated_at",
                                    "created_at",
                                    "updated_at"
                                ]
                            }
                        },
                        "description": "Ordering\n\n* `created_at` - Created at\n* `-created_at` - Created at (décroissant)\n* `updated_at` - Updated at\n* `-updated_at` - Updated at (décroissant)",
                        "explode": false,
                        "style": "form"
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "buses"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedBusLocationList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/buses/locations/{id}/": {
            "get": {
                "operationId": "buses_locations_retrieve",
                "description": "API endpoint for bus locations.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this bus location.",
                        "required": true
                    }
                ],
                "tags": [
                    "buses"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BusLocation"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/drivers/drivers/": {
            "get": {
                "operationId": "drivers_drivers_list",
                "description": "API endpoint for drivers.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "is_active",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "is_available",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "max_rating",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "min_experience",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "min_rating",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "order_by",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "-created_at",
                                    "-updated_at",
                                    "created_at",
                                    "updated_at"
                                ]
                            }
                        },
                        "description": "Ordering\n\n* `created_at` - Created at\n* `-created_at` - Created at (décroissant)\n* `updated_at` - Updated at\n* `-updated_at` - Updated at (décroissant)",
                        "explode": false,
                        "style": "form"
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "user_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "tags": [
                    "drivers"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedDriverList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "drivers_drivers_create",
                "description": "API endpoint for drivers.",
                "tags": [
                    "drivers"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DriverCreateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/DriverCreateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/DriverCreateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DriverCreate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/drivers/drivers/{driver_pk}/ratings/": {
            "get": {
                "operationId": "drivers_drivers_ratings_list",
                "description": "API endpoint for driver ratings.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "created_after",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "in": "query",
                        "name": "created_before",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "in": "query",
                        "name": "driver_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "path",
                        "name": "driver_pk",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "max_rating",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "min_rating",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "order_by",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "-created_at",
                                    "-updated_at",
                                    "created_at",
                                    "updated_at"
                                ]
                            }
                        },
                        "description": "Ordering\n\n* `created_at` - Created at\n* `-created_at` - Created at (décroissant)\n* `updated_at` - Updated at\n* `-updated_at` - Updated at (décroissant)",
                        "explode": false,
                        "style": "form"
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "user_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "tags": [
                    "drivers"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedDriverRatingList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "drivers_drivers_ratings_create",
                "description": "API endpoint for driver ratings.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "driver_pk",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "drivers"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DriverRatingCreateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/DriverRatingCreateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/DriverRatingCreateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DriverRatingCreate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/drivers/drivers/{driver_pk}/ratings/{id}/": {
            "get": {
                "operationId": "drivers_drivers_ratings_retrieve",
                "description": "API endpoint for driver ratings.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "driver_pk",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this driver rating.",
                        "required": true
                    }
                ],
                "tags": [
                    "drivers"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DriverRating"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "drivers_drivers_ratings_partial_update",
                "description": "API endpoint for driver ratings.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "driver_pk",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this driver rating.",
                        "required": true
                    }
                ],
                "tags": [
                    "drivers"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedDriverRatingRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedDriverRatingRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedDriverRatingRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DriverRating"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "drivers_drivers_ratings_destroy",
                "description": "API endpoint for driver ratings.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "driver_pk",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this driver rating.",
                        "required": true
                    }
                ],
                "tags": [
                    "drivers"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/drivers/drivers/{id}/": {
            "get": {
                "operationId": "drivers_drivers_retrieve",
                "description": "API endpoint for drivers.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this driver.",
                        "required": true
                    }
                ],
                "tags": [
                    "drivers"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Driver"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "drivers_drivers_partial_update",
                "description": "API endpoint for drivers.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this driver.",
                        "required": true
                    }
                ],
                "tags": [
                    "drivers"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedDriverUpdateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedDriverUpdateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedDriverUpdateRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DriverUpdate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "drivers_drivers_destroy",
                "description": "API endpoint for drivers.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this driver.",
                        "required": true
                    }
                ],
                "tags": [
                    "drivers"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/drivers/drivers/{id}/approve/": {
            "post": {
                "operationId": "drivers_drivers_approve_create",
                "description": "Approve a driver.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this driver.",
                        "required": true
                    }
                ],
                "tags": [
                    "drivers"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DriverApproveRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/DriverApproveRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/DriverApproveRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DriverApprove"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/drivers/drivers/{id}/ratings/": {
            "get": {
                "operationId": "drivers_drivers_ratings_retrieve_2",
                "description": "Get ratings for a driver.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this driver.",
                        "required": true
                    }
                ],
                "tags": [
                    "drivers"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Driver"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/drivers/drivers/{id}/reject/": {
            "post": {
                "operationId": "drivers_drivers_reject_create",
                "description": "Reject a driver.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this driver.",
                        "required": true
                    }
                ],
                "tags": [
                    "drivers"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DriverApproveRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/DriverApproveRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/DriverApproveRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DriverApprove"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/drivers/drivers/{id}/update_availability/": {
            "post": {
                "operationId": "drivers_drivers_update_availability_create",
                "description": "Update driver availability.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this driver.",
                        "required": true
                    }
                ],
                "tags": [
                    "drivers"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DriverAvailabilityRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/DriverAvailabilityRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/DriverAvailabilityRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DriverAvailability"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/drivers/drivers/profile/": {
            "get": {
                "operationId": "drivers_drivers_profile_retrieve",
                "description": "Get the current driver's profile.",
                "tags": [
                    "drivers"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Driver"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/drivers/drivers/register/": {
            "post": {
                "operationId": "drivers_drivers_register_create",
                "description": "Register a new driver.",
                "tags": [
                    "drivers"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DriverRegistrationRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/DriverRegistrationRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/DriverRegistrationRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DriverRegistration"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/drivers/register/": {
            "post": {
                "operationId": "drivers_register_create",
                "description": "Register a new driver with their driver information.",
                "tags": [
                    "drivers"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/gamification/achievements/": {
            "get": {
                "operationId": "gamification_achievements_list",
                "description": "ViewSet for viewing achievements.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "achievement_type",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "title": "Type",
                                "enum": [
                                    "distance",
                                    "eco",
                                    "level",
                                    "social",
                                    "special",
                                    "streak",
                                    "trips"
                                ]
                            }
                        },
                        "description": "Filter by achievement type\n\n* `trips` - Number of Trips\n* `distance` - Distance Traveled\n* `streak` - Day Streak\n* `eco` - Environmental Impact\n* `social` - Social Engagement\n* `special` - Special Achievement\n* `level` - Level Based",
                        "explode": true,
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "max_points",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Maximum points reward"
                    },
                    {
                        "in": "query",
                        "name": "min_points",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Minimum points reward"
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "rarity",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "common",
                                    "epic",
                                    "legendary",
                                    "rare",
                                    "uncommon"
                                ]
                            }
                        },
                        "description": "Filter by rarity\n\n* `common` - Common\n* `uncommon` - Uncommon\n* `rare` - Rare\n* `epic` - Epic\n* `legendary` - Legendary",
                        "explode": true,
                        "style": "form"
                    }
                ],
                "tags": [
                    "gamification"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedAchievementList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/gamification/achievements/{id}/": {
            "get": {
                "operationId": "gamification_achievements_retrieve",
                "description": "ViewSet for viewing achievements.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this achievement.",
                        "required": true
                    }
                ],
                "tags": [
                    "gamification"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Achievement"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/gamification/achievements/progress/": {
            "get": {
                "operationId": "gamification_achievements_progress_retrieve",
                "description": "Get achievement progress summary.",
                "tags": [
                    "gamification"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Achievement"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/gamification/achievements/unlocked/": {
            "get": {
                "operationId": "gamification_achievements_unlocked_retrieve",
                "description": "Get user's unlocked achievements.",
                "tags": [
                    "gamification"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Achievement"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/gamification/challenges/": {
            "get": {
                "operationId": "gamification_challenges_list",
                "description": "ViewSet for challenges.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "challenge_type",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "community",
                                    "eco",
                                    "individual",
                                    "route"
                                ]
                            }
                        },
                        "description": "Filter by challenge type\n\n* `individual` - Individual Challenge\n* `community` - Community Challenge\n* `route` - Route Challenge\n* `eco` - Eco Challenge",
                        "explode": true,
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "ends_before",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "description": "Challenges ending before this date"
                    },
                    {
                        "in": "query",
                        "name": "is_completed",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter by completion status"
                    },
                    {
                        "in": "query",
                        "name": "min_reward",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Minimum points reward"
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "starts_after",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "description": "Challenges starting after this date"
                    },
                    {
                        "in": "query",
                        "name": "target_line",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "tags": [
                    "gamification"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedChallengeList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/gamification/challenges/{id}/": {
            "get": {
                "operationId": "gamification_challenges_retrieve",
                "description": "ViewSet for challenges.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this challenge.",
                        "required": true
                    }
                ],
                "tags": [
                    "gamification"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Challenge"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/gamification/challenges/{id}/join/": {
            "post": {
                "operationId": "gamification_challenges_join_create",
                "description": "Join a challenge.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this challenge.",
                        "required": true
                    }
                ],
                "tags": [
                    "gamification"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChallengeRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ChallengeRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ChallengeRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Challenge"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/gamification/challenges/my_challenges/": {
            "get": {
                "operationId": "gamification_challenges_my_challenges_retrieve",
                "description": "Get user's challenges.",
                "tags": [
                    "gamification"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Challenge"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/gamification/leaderboard/all_time/": {
            "get": {
                "operationId": "gamification_leaderboard_all_time_retrieve",
                "description": "Get all-time leaderboard.",
                "tags": [
                    "gamification"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LeaderboardEntry"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/gamification/leaderboard/daily/": {
            "get": {
                "operationId": "gamification_leaderboard_daily_retrieve",
                "description": "Get daily leaderboard.",
                "tags": [
                    "gamification"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LeaderboardEntry"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/gamification/leaderboard/monthly/": {
            "get": {
                "operationId": "gamification_leaderboard_monthly_retrieve",
                "description": "Get monthly leaderboard.",
                "tags": [
                    "gamification"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LeaderboardEntry"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/gamification/leaderboard/my_rank/": {
            "get": {
                "operationId": "gamification_leaderboard_my_rank_retrieve",
                "description": "Get current user's rank in all leaderboards.",
                "tags": [
                    "gamification"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LeaderboardEntry"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/gamification/leaderboard/weekly/": {
            "get": {
                "operationId": "gamification_leaderboard_weekly_retrieve",
                "description": "Get weekly leaderboard.",
                "tags": [
                    "gamification"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LeaderboardEntry"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/gamification/profile/complete_trip/": {
            "post": {
                "operationId": "gamification_profile_complete_trip_create",
                "description": "Complete a trip and earn points.",
                "tags": [
                    "gamification"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserProfileRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/UserProfileRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/UserProfileRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserProfile"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/gamification/profile/me/": {
            "get": {
                "operationId": "gamification_profile_me_retrieve",
                "description": "Get current user's gamification profile.",
                "tags": [
                    "gamification"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserProfile"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/gamification/profile/update_preferences/": {
            "patch": {
                "operationId": "gamification_profile_update_preferences_partial_update",
                "description": "Update profile preferences.",
                "tags": [
                    "gamification"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedUserProfileRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedUserProfileRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedUserProfileRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserProfile"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/gamification/rewards/": {
            "get": {
                "operationId": "gamification_rewards_list",
                "description": "ViewSet for rewards.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "max_cost",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Maximum points cost"
                    },
                    {
                        "in": "query",
                        "name": "min_cost",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Minimum points cost"
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "partner",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter by partner name"
                    },
                    {
                        "in": "query",
                        "name": "partner_name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "reward_type",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "discount",
                                    "donation",
                                    "free_ride",
                                    "merchandise",
                                    "special"
                                ]
                            }
                        },
                        "description": "Filter by reward type\n\n* `discount` - Discount Code\n* `free_ride` - Free Ride\n* `merchandise` - Merchandise\n* `donation` - Charity Donation\n* `special` - Special Reward",
                        "explode": true,
                        "style": "form"
                    }
                ],
                "tags": [
                    "gamification"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedRewardList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/gamification/rewards/{id}/": {
            "get": {
                "operationId": "gamification_rewards_retrieve",
                "description": "ViewSet for rewards.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this reward.",
                        "required": true
                    }
                ],
                "tags": [
                    "gamification"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Reward"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/gamification/rewards/{id}/redeem/": {
            "post": {
                "operationId": "gamification_rewards_redeem_create",
                "description": "Redeem a reward.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this reward.",
                        "required": true
                    }
                ],
                "tags": [
                    "gamification"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RewardRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/RewardRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/RewardRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Reward"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/gamification/rewards/my_rewards/": {
            "get": {
                "operationId": "gamification_rewards_my_rewards_retrieve",
                "description": "Get user's redeemed rewards.",
                "tags": [
                    "gamification"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Reward"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/gamification/transactions/": {
            "get": {
                "operationId": "gamification_transactions_list",
                "description": "ViewSet for viewing point transactions.",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "gamification"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedPointTransactionList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/gamification/transactions/{id}/": {
            "get": {
                "operationId": "gamification_transactions_retrieve",
                "description": "ViewSet for viewing point transactions.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "gamification"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PointTransaction"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/gamification/transactions/summary/": {
            "get": {
                "operationId": "gamification_transactions_summary_retrieve",
                "description": "Get points summary.",
                "tags": [
                    "gamification"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PointTransaction"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/lines/lines/": {
            "get": {
                "operationId": "lines_lines_list",
                "description": "API endpoint for lines.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "code",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "is_active",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "max_frequency",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "min_frequency",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "order_by",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "-created_at",
                                    "-updated_at",
                                    "created_at",
                                    "updated_at"
                                ]
                            }
                        },
                        "description": "Ordering\n\n* `created_at` - Created at\n* `-created_at` - Created at (décroissant)\n* `updated_at` - Updated at\n* `-updated_at` - Updated at (décroissant)",
                        "explode": false,
                        "style": "form"
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "stop_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "tags": [
                    "lines"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedLineList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "lines_lines_create",
                "description": "API endpoint for lines.",
                "tags": [
                    "lines"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LineCreateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/LineCreateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/LineCreateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LineCreate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/lines/lines/{id}/": {
            "get": {
                "operationId": "lines_lines_retrieve",
                "description": "API endpoint for lines.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this line.",
                        "required": true
                    }
                ],
                "tags": [
                    "lines"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Line"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "lines_lines_partial_update",
                "description": "API endpoint for lines.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this line.",
                        "required": true
                    }
                ],
                "tags": [
                    "lines"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedLineUpdateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedLineUpdateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedLineUpdateRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LineUpdate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "lines_lines_destroy",
                "description": "API endpoint for lines.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this line.",
                        "required": true
                    }
                ],
                "tags": [
                    "lines"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/lines/lines/{id}/activate/": {
            "post": {
                "operationId": "lines_lines_activate_create",
                "description": "Activate a line.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this line.",
                        "required": true
                    }
                ],
                "tags": [
                    "lines"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LineRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/LineRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/LineRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Line"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/lines/lines/{id}/add_schedule/": {
            "post": {
                "operationId": "lines_lines_add_schedule_create",
                "description": "Add a schedule to this line.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this line.",
                        "required": true
                    }
                ],
                "tags": [
                    "lines"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ScheduleCreateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ScheduleCreateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ScheduleCreateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScheduleCreate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/lines/lines/{id}/add_stop/": {
            "post": {
                "operationId": "lines_lines_add_stop_create",
                "description": "Add a stop to this line.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this line.",
                        "required": true
                    }
                ],
                "tags": [
                    "lines"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddStopToLineRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/AddStopToLineRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/AddStopToLineRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddStopToLine"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/lines/lines/{id}/deactivate/": {
            "post": {
                "operationId": "lines_lines_deactivate_create",
                "description": "Deactivate a line.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this line.",
                        "required": true
                    }
                ],
                "tags": [
                    "lines"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LineRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/LineRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/LineRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Line"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/lines/lines/{id}/remove_stop/": {
            "post": {
                "operationId": "lines_lines_remove_stop_create",
                "description": "Remove a stop from this line.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this line.",
                        "required": true
                    }
                ],
                "tags": [
                    "lines"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RemoveStopFromLineRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/RemoveStopFromLineRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/RemoveStopFromLineRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RemoveStopFromLine"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/lines/lines/{id}/schedules/": {
            "get": {
                "operationId": "lines_lines_schedules_retrieve",
                "description": "Get schedules for this line.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this line.",
                        "required": true
                    }
                ],
                "tags": [
                    "lines"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Line"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/lines/lines/{id}/stops/": {
            "get": {
                "operationId": "lines_lines_stops_retrieve",
                "description": "Get stops for this line.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this line.",
                        "required": true
                    }
                ],
                "tags": [
                    "lines"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Line"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/lines/lines/{id}/update_stop_order/": {
            "post": {
                "operationId": "lines_lines_update_stop_order_create",
                "description": "Update a stop's order in this line.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this line.",
                        "required": true
                    }
                ],
                "tags": [
                    "lines"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateStopOrderRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateStopOrderRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateStopOrderRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateStopOrder"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/lines/lines/search/": {
            "get": {
                "operationId": "lines_lines_search_retrieve",
                "description": "Search for lines.",
                "tags": [
                    "lines"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Line"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/lines/schedules/": {
            "get": {
                "operationId": "lines_schedules_list",
                "description": "API endpoint for schedules.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "day_of_week",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "is_active",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "line_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "max_frequency",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "min_frequency",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "order_by",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "-created_at",
                                    "-updated_at",
                                    "created_at",
                                    "updated_at"
                                ]
                            }
                        },
                        "description": "Ordering\n\n* `created_at` - Created at\n* `-created_at` - Created at (décroissant)\n* `updated_at` - Updated at\n* `-updated_at` - Updated at (décroissant)",
                        "explode": false,
                        "style": "form"
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "lines"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedScheduleList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "lines_schedules_create",
                "description": "API endpoint for schedules.",
                "tags": [
                    "lines"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ScheduleRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ScheduleRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ScheduleRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Schedule"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/lines/schedules/{id}/": {
            "get": {
                "operationId": "lines_schedules_retrieve",
                "description": "API endpoint for schedules.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this schedule.",
                        "required": true
                    }
                ],
                "tags": [
                    "lines"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Schedule"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "lines_schedules_partial_update",
                "description": "API endpoint for schedules.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this schedule.",
                        "required": true
                    }
                ],
                "tags": [
                    "lines"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedScheduleRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedScheduleRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedScheduleRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Schedule"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "lines_schedules_destroy",
                "description": "API endpoint for schedules.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this schedule.",
                        "required": true
                    }
                ],
                "tags": [
                    "lines"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/lines/stops/": {
            "get": {
                "operationId": "lines_stops_list",
                "description": "API endpoint for stops.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "is_active",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "line_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "order_by",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "-created_at",
                                    "-updated_at",
                                    "created_at",
                                    "updated_at"
                                ]
                            }
                        },
                        "description": "Ordering\n\n* `created_at` - Created at\n* `-created_at` - Created at (décroissant)\n* `updated_at` - Updated at\n* `-updated_at` - Updated at (décroissant)",
                        "explode": false,
                        "style": "form"
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "lines"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedStopList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "lines_stops_create",
                "description": "API endpoint for stops.",
                "tags": [
                    "lines"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StopCreateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/StopCreateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/StopCreateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StopCreate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/lines/stops/{id}/": {
            "get": {
                "operationId": "lines_stops_retrieve",
                "description": "API endpoint for stops.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this stop.",
                        "required": true
                    }
                ],
                "tags": [
                    "lines"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Stop"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "lines_stops_partial_update",
                "description": "API endpoint for stops.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this stop.",
                        "required": true
                    }
                ],
                "tags": [
                    "lines"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedStopUpdateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedStopUpdateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedStopUpdateRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StopUpdate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "lines_stops_destroy",
                "description": "API endpoint for stops.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this stop.",
                        "required": true
                    }
                ],
                "tags": [
                    "lines"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/lines/stops/{id}/lines/": {
            "get": {
                "operationId": "lines_stops_lines_retrieve",
                "description": "Get lines that pass through this stop.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this stop.",
                        "required": true
                    }
                ],
                "tags": [
                    "lines"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Stop"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/lines/stops/nearby/": {
            "get": {
                "operationId": "lines_stops_nearby_retrieve",
                "description": "Get stops near a location.",
                "tags": [
                    "lines"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Stop"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/notifications/device-tokens/": {
            "get": {
                "operationId": "notifications_device_tokens_list",
                "description": "ViewSet for managing device tokens.",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "notifications"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedDeviceTokenList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "notifications_device_tokens_create",
                "description": "ViewSet for managing device tokens.",
                "tags": [
                    "notifications"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeviceTokenRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/DeviceTokenRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/DeviceTokenRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeviceToken"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/notifications/device-tokens/{id}/": {
            "get": {
                "operationId": "notifications_device_tokens_retrieve",
                "description": "ViewSet for managing device tokens.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "notifications"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeviceToken"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "put": {
                "operationId": "notifications_device_tokens_update",
                "description": "ViewSet for managing device tokens.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "notifications"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeviceTokenRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/DeviceTokenRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/DeviceTokenRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeviceToken"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "notifications_device_tokens_partial_update",
                "description": "ViewSet for managing device tokens.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "notifications"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedDeviceTokenRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedDeviceTokenRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedDeviceTokenRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeviceToken"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "notifications_device_tokens_destroy",
                "description": "ViewSet for managing device tokens.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "notifications"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/notifications/device-tokens/{id}/deactivate/": {
            "post": {
                "operationId": "notifications_device_tokens_deactivate_create",
                "description": "Deactivate a device token.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "notifications"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeviceTokenRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/DeviceTokenRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/DeviceTokenRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeviceToken"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/notifications/notifications/": {
            "get": {
                "operationId": "notifications_notifications_list",
                "description": "ViewSet for managing notifications.",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "notifications"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedNotificationList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "notifications_notifications_create",
                "description": "ViewSet for managing notifications.",
                "tags": [
                    "notifications"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationCreateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationCreateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationCreateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationCreate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/notifications/notifications/{id}/": {
            "get": {
                "operationId": "notifications_notifications_retrieve",
                "description": "ViewSet for managing notifications.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "notifications"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Notification"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "put": {
                "operationId": "notifications_notifications_update",
                "description": "ViewSet for managing notifications.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "notifications"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Notification"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "notifications_notifications_partial_update",
                "description": "ViewSet for managing notifications.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "notifications"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedNotificationRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedNotificationRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedNotificationRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Notification"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "notifications_notifications_destroy",
                "description": "ViewSet for managing notifications.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "notifications"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/notifications/notifications/{id}/mark_read/": {
            "post": {
                "operationId": "notifications_notifications_mark_read_create",
                "description": "Mark a notification as read.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "notifications"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Notification"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/notifications/notifications/mark_all_read/": {
            "post": {
                "operationId": "notifications_notifications_mark_all_read_create",
                "description": "Mark all notifications as read.",
                "tags": [
                    "notifications"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Notification"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/notifications/notifications/schedule_arrival/": {
            "post": {
                "operationId": "notifications_notifications_schedule_arrival_create",
                "description": "Schedule a notification for bus arrival.",
                "tags": [
                    "notifications"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Notification"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/notifications/notifications/unread_count/": {
            "get": {
                "operationId": "notifications_notifications_unread_count_retrieve",
                "description": "Get count of unread notifications.",
                "tags": [
                    "notifications"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Notification"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/notifications/preferences/": {
            "get": {
                "operationId": "notifications_preferences_list",
                "description": "ViewSet for managing notification preferences.",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "notifications"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedNotificationPreferenceList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "notifications_preferences_create",
                "description": "ViewSet for managing notification preferences.",
                "tags": [
                    "notifications"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationPreferenceRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationPreferenceRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationPreferenceRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationPreference"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/notifications/preferences/{id}/": {
            "get": {
                "operationId": "notifications_preferences_retrieve",
                "description": "ViewSet for managing notification preferences.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "notifications"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationPreference"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "put": {
                "operationId": "notifications_preferences_update",
                "description": "ViewSet for managing notification preferences.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "notifications"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationPreferenceRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationPreferenceRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationPreferenceRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationPreference"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "notifications_preferences_partial_update",
                "description": "ViewSet for managing notification preferences.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "notifications"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedNotificationPreferenceRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedNotificationPreferenceRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedNotificationPreferenceRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationPreference"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "notifications_preferences_destroy",
                "description": "ViewSet for managing notification preferences.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "notifications"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/notifications/preferences/by_type/": {
            "get": {
                "operationId": "notifications_preferences_by_type_retrieve",
                "description": "Get preference by notification type.",
                "tags": [
                    "notifications"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationPreference"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/notifications/schedules/": {
            "get": {
                "operationId": "notifications_schedules_list",
                "description": "ViewSet for viewing scheduled notifications.",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "notifications"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedNotificationScheduleList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/notifications/schedules/{id}/": {
            "get": {
                "operationId": "notifications_schedules_retrieve",
                "description": "ViewSet for viewing scheduled notifications.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "notifications"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationSchedule"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/notifications/schedules/{id}/cancel/": {
            "post": {
                "operationId": "notifications_schedules_cancel_create",
                "description": "Cancel a scheduled notification.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "notifications"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationScheduleRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationScheduleRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationScheduleRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationSchedule"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/notifications/system/notify_delay/": {
            "post": {
                "operationId": "notifications_system_notify_delay_create",
                "description": "Send delay notifications for a bus/line.",
                "tags": [
                    "notifications"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/offline/cache/clear/": {
            "post": {
                "operationId": "offline_cache_clear_create",
                "description": "Clear user's cache.",
                "tags": [
                    "offline"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserCacheRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/UserCacheRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/UserCacheRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserCache"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/offline/cache/statistics/": {
            "get": {
                "operationId": "offline_cache_statistics_retrieve",
                "description": "Get cache statistics.",
                "tags": [
                    "offline"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserCache"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/offline/cache/status/": {
            "get": {
                "operationId": "offline_cache_status_retrieve",
                "description": "Get user's cache status.",
                "tags": [
                    "offline"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserCache"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/offline/cache/sync/": {
            "post": {
                "operationId": "offline_cache_sync_create",
                "description": "Sync user's offline data.",
                "tags": [
                    "offline"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SyncRequestRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/SyncRequestRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/SyncRequestRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SyncRequest"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/offline/config/": {
            "get": {
                "operationId": "offline_config_list",
                "description": "ViewSet for cache configuration.\n\nOnly staff can manage configurations.",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "offline"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedCacheConfigurationList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/offline/config/{id}/": {
            "get": {
                "operationId": "offline_config_retrieve",
                "description": "ViewSet for cache configuration.\n\nOnly staff can manage configurations.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this cache configuration.",
                        "required": true
                    }
                ],
                "tags": [
                    "offline"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CacheConfiguration"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/offline/config/current/": {
            "get": {
                "operationId": "offline_config_current_retrieve",
                "description": "Get current active configuration.",
                "tags": [
                    "offline"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CacheConfiguration"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/offline/data/buses/": {
            "get": {
                "operationId": "offline_data_buses_retrieve",
                "description": "Get cached buses.",
                "tags": [
                    "offline"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CachedData"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/offline/data/get_data/": {
            "post": {
                "operationId": "offline_data_get_data_create",
                "description": "Get specific cached data.",
                "tags": [
                    "offline"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DataRequestRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/DataRequestRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/DataRequestRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataRequest"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/offline/data/lines/": {
            "get": {
                "operationId": "offline_data_lines_retrieve",
                "description": "Get cached lines.",
                "tags": [
                    "offline"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CachedData"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/offline/data/notifications/": {
            "get": {
                "operationId": "offline_data_notifications_retrieve",
                "description": "Get cached notifications.",
                "tags": [
                    "offline"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CachedData"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/offline/data/schedules/": {
            "get": {
                "operationId": "offline_data_schedules_retrieve",
                "description": "Get cached schedules.",
                "tags": [
                    "offline"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CachedData"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/offline/data/stops/": {
            "get": {
                "operationId": "offline_data_stops_retrieve",
                "description": "Get cached stops.",
                "tags": [
                    "offline"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CachedData"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/offline/logs/": {
            "get": {
                "operationId": "offline_logs_list",
                "description": "ViewSet for offline logs.",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "offline"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedOfflineLogList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/offline/logs/{id}/": {
            "get": {
                "operationId": "offline_logs_retrieve",
                "description": "ViewSet for offline logs.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "offline"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OfflineLog"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/offline/logs/summary/": {
            "get": {
                "operationId": "offline_logs_summary_retrieve",
                "description": "Get log summary by type.",
                "tags": [
                    "offline"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OfflineLog"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/offline/sync-queue/": {
            "get": {
                "operationId": "offline_sync_queue_list",
                "description": "ViewSet for sync queue management.",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "offline"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedSyncQueueList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "offline_sync_queue_create",
                "description": "ViewSet for sync queue management.",
                "tags": [
                    "offline"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SyncQueueRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/SyncQueueRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/SyncQueueRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SyncQueue"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/offline/sync-queue/{id}/": {
            "get": {
                "operationId": "offline_sync_queue_retrieve",
                "description": "ViewSet for sync queue management.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "offline"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SyncQueue"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "put": {
                "operationId": "offline_sync_queue_update",
                "description": "ViewSet for sync queue management.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "offline"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SyncQueueRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/SyncQueueRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/SyncQueueRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SyncQueue"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "offline_sync_queue_partial_update",
                "description": "ViewSet for sync queue management.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "offline"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedSyncQueueRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedSyncQueueRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedSyncQueueRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SyncQueue"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "offline_sync_queue_destroy",
                "description": "ViewSet for sync queue management.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "offline"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/offline/sync-queue/{id}/retry/": {
            "post": {
                "operationId": "offline_sync_queue_retry_create",
                "description": "Retry a failed sync item.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "offline"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SyncQueueRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/SyncQueueRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/SyncQueueRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SyncQueue"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/offline/sync-queue/failed/": {
            "get": {
                "operationId": "offline_sync_queue_failed_retrieve",
                "description": "Get failed sync items.",
                "tags": [
                    "offline"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SyncQueue"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/offline/sync-queue/pending/": {
            "get": {
                "operationId": "offline_sync_queue_pending_retrieve",
                "description": "Get pending sync items.",
                "tags": [
                    "offline"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SyncQueue"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/offline/sync-queue/process/": {
            "post": {
                "operationId": "offline_sync_queue_process_create",
                "description": "Process pending sync queue items.",
                "tags": [
                    "offline"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SyncQueueRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/SyncQueueRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/SyncQueueRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SyncQueue"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/offline/sync-queue/queue_action/": {
            "post": {
                "operationId": "offline_sync_queue_queue_action_create",
                "description": "Queue an offline action.",
                "tags": [
                    "offline"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QueueActionRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/QueueActionRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/QueueActionRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QueueAction"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/tracking/active-buses/": {
            "get": {
                "operationId": "tracking_active_buses_retrieve",
                "description": "Get all active buses currently tracking.",
                "tags": [
                    "tracking"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/tracking/anomalies/": {
            "get": {
                "operationId": "tracking_anomalies_list",
                "description": "API endpoint for anomalies.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "bus_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "created_after",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "in": "query",
                        "name": "created_before",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "in": "query",
                        "name": "order_by",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "-created_at",
                                    "-updated_at",
                                    "created_at",
                                    "updated_at"
                                ]
                            }
                        },
                        "description": "Ordering\n\n* `created_at` - Created at\n* `-created_at` - Created at (décroissant)\n* `updated_at` - Updated at\n* `-updated_at` - Updated at (décroissant)",
                        "explode": false,
                        "style": "form"
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "resolved",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "resolved_after",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "in": "query",
                        "name": "resolved_before",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "in": "query",
                        "name": "severity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "trip_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedAnomalyList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "tracking_anomalies_create",
                "description": "API endpoint for anomalies.",
                "tags": [
                    "tracking"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AnomalyCreateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/AnomalyCreateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/AnomalyCreateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnomalyCreate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/tracking/anomalies/{id}/": {
            "get": {
                "operationId": "tracking_anomalies_retrieve",
                "description": "API endpoint for anomalies.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this anomaly.",
                        "required": true
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Anomaly"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "tracking_anomalies_partial_update",
                "description": "API endpoint for anomalies.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this anomaly.",
                        "required": true
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedAnomalyRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedAnomalyRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedAnomalyRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Anomaly"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "tracking_anomalies_destroy",
                "description": "API endpoint for anomalies.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this anomaly.",
                        "required": true
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/tracking/anomalies/{id}/resolve/": {
            "post": {
                "operationId": "tracking_anomalies_resolve_create",
                "description": "Resolve an anomaly.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this anomaly.",
                        "required": true
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AnomalyResolveRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/AnomalyResolveRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/AnomalyResolveRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnomalyResolve"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/tracking/bus-lines/": {
            "get": {
                "operationId": "tracking_bus_lines_list",
                "description": "API endpoint for bus-line assignments.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "bus_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "is_active",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "line_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "order_by",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "-created_at",
                                    "-updated_at",
                                    "created_at",
                                    "updated_at"
                                ]
                            }
                        },
                        "description": "Ordering\n\n* `created_at` - Created at\n* `-created_at` - Created at (décroissant)\n* `updated_at` - Updated at\n* `-updated_at` - Updated at (décroissant)",
                        "explode": false,
                        "style": "form"
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "tracking_status",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedBusLineList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "tracking_bus_lines_create",
                "description": "API endpoint for bus-line assignments.",
                "tags": [
                    "tracking"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BusLineCreateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/BusLineCreateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/BusLineCreateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BusLineCreate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/tracking/bus-lines/{id}/": {
            "get": {
                "operationId": "tracking_bus_lines_retrieve",
                "description": "API endpoint for bus-line assignments.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this bus line.",
                        "required": true
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BusLine"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "tracking_bus_lines_partial_update",
                "description": "API endpoint for bus-line assignments.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this bus line.",
                        "required": true
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedBusLineRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedBusLineRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedBusLineRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BusLine"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "tracking_bus_lines_destroy",
                "description": "API endpoint for bus-line assignments.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this bus line.",
                        "required": true
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/tracking/bus-lines/start_tracking/": {
            "post": {
                "operationId": "tracking_bus_lines_start_tracking_create",
                "description": "Start tracking a bus on a line.",
                "tags": [
                    "tracking"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StartTrackingRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/StartTrackingRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/StartTrackingRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StartTracking"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/tracking/bus-lines/stop_tracking/": {
            "post": {
                "operationId": "tracking_bus_lines_stop_tracking_create",
                "description": "Stop tracking a bus on a line.",
                "tags": [
                    "tracking"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/tracking/locations/": {
            "get": {
                "operationId": "tracking_locations_list",
                "description": "API endpoint for location updates.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "bus_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "created_after",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "in": "query",
                        "name": "created_before",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "in": "query",
                        "name": "line_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "max_speed",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "min_speed",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "nearest_stop_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "order_by",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "-created_at",
                                    "-updated_at",
                                    "created_at",
                                    "updated_at"
                                ]
                            }
                        },
                        "description": "Ordering\n\n* `created_at` - Created at\n* `-created_at` - Created at (décroissant)\n* `updated_at` - Updated at\n* `-updated_at` - Updated at (décroissant)",
                        "explode": false,
                        "style": "form"
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "trip_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedLocationUpdateList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "tracking_locations_create",
                "description": "API endpoint for location updates.",
                "tags": [
                    "tracking"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LocationUpdateCreateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/LocationUpdateCreateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/LocationUpdateCreateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LocationUpdateCreate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/tracking/locations/{id}/": {
            "get": {
                "operationId": "tracking_locations_retrieve",
                "description": "API endpoint for location updates.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this location update.",
                        "required": true
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LocationUpdate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "tracking_locations_partial_update",
                "description": "API endpoint for location updates.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this location update.",
                        "required": true
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedLocationUpdateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedLocationUpdateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedLocationUpdateRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LocationUpdate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "tracking_locations_destroy",
                "description": "API endpoint for location updates.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this location update.",
                        "required": true
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/tracking/locations/estimate_arrival/": {
            "post": {
                "operationId": "tracking_locations_estimate_arrival_create",
                "description": "Estimate arrival time to a stop.",
                "tags": [
                    "tracking"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EstimateArrivalTimeRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/EstimateArrivalTimeRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/EstimateArrivalTimeRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EstimateArrivalTime"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/tracking/passenger-counts/": {
            "get": {
                "operationId": "tracking_passenger_counts_list",
                "description": "API endpoint for passenger counts.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "bus_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "created_after",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "in": "query",
                        "name": "created_before",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "in": "query",
                        "name": "line_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "max_count",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "max_occupancy",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "min_count",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "min_occupancy",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "order_by",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "-created_at",
                                    "-updated_at",
                                    "created_at",
                                    "updated_at"
                                ]
                            }
                        },
                        "description": "Ordering\n\n* `created_at` - Created at\n* `-created_at` - Created at (décroissant)\n* `updated_at` - Updated at\n* `-updated_at` - Updated at (décroissant)",
                        "explode": false,
                        "style": "form"
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "stop_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "trip_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedPassengerCountList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "tracking_passenger_counts_create",
                "description": "API endpoint for passenger counts.",
                "tags": [
                    "tracking"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PassengerCountCreateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PassengerCountCreateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PassengerCountCreateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PassengerCountCreate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/tracking/passenger-counts/{id}/": {
            "get": {
                "operationId": "tracking_passenger_counts_retrieve",
                "description": "API endpoint for passenger counts.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this passenger count.",
                        "required": true
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PassengerCount"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "tracking_passenger_counts_partial_update",
                "description": "API endpoint for passenger counts.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this passenger count.",
                        "required": true
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedPassengerCountRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedPassengerCountRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedPassengerCountRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PassengerCount"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "tracking_passenger_counts_destroy",
                "description": "API endpoint for passenger counts.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this passenger count.",
                        "required": true
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/tracking/route-segments/": {
            "get": {
                "operationId": "tracking_route_segments_list",
                "description": "ViewSet for managing route segments.",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedRouteSegmentList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "tracking_route_segments_create",
                "description": "ViewSet for managing route segments.",
                "tags": [
                    "tracking"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RouteSegmentRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/RouteSegmentRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/RouteSegmentRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RouteSegment"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/tracking/route-segments/{id}/": {
            "get": {
                "operationId": "tracking_route_segments_retrieve",
                "description": "ViewSet for managing route segments.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this route segment.",
                        "required": true
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RouteSegment"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "tracking_route_segments_partial_update",
                "description": "ViewSet for managing route segments.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this route segment.",
                        "required": true
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedRouteSegmentRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedRouteSegmentRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedRouteSegmentRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RouteSegment"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "tracking_route_segments_destroy",
                "description": "ViewSet for managing route segments.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this route segment.",
                        "required": true
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/tracking/routes/arrivals/": {
            "get": {
                "operationId": "tracking_routes_arrivals_list",
                "description": "Get estimated arrival times for all buses approaching a specific stop",
                "summary": "Get arrival estimates for a stop",
                "parameters": [
                    {
                        "in": "query",
                        "name": "line_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional line ID to filter by"
                    },
                    {
                        "in": "query",
                        "name": "stop_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Stop ID",
                        "required": true
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BusArrivalEstimate"
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/tracking/routes/bus_route/": {
            "get": {
                "operationId": "tracking_routes_bus_route_retrieve",
                "description": "Get the estimated route, remaining stops, and ETA for a specific bus",
                "summary": "Get estimated route for a bus",
                "parameters": [
                    {
                        "in": "query",
                        "name": "bus_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Bus ID",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "destination_stop_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Optional destination stop ID"
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BusRoute"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/tracking/routes/track_me/": {
            "get": {
                "operationId": "tracking_routes_track_me_retrieve",
                "description": "Get real-time tracking data for the current driver",
                "summary": "Track driver in real-time",
                "tags": [
                    "tracking"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BusRoute"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/tracking/routes/visualization/": {
            "get": {
                "operationId": "tracking_routes_visualization_retrieve",
                "description": "Get route data optimized for map visualization including polylines and markers",
                "summary": "Get route visualization data",
                "parameters": [
                    {
                        "in": "query",
                        "name": "line_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Line ID",
                        "required": true
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RouteVisualization"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/tracking/trips/": {
            "get": {
                "operationId": "tracking_trips_list",
                "description": "API endpoint for trips.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "bus_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "driver_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "end_stop_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "end_time_after",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "in": "query",
                        "name": "end_time_before",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "in": "query",
                        "name": "is_completed",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "line_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "max_distance",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "min_distance",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "order_by",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "-created_at",
                                    "-updated_at",
                                    "created_at",
                                    "updated_at"
                                ]
                            }
                        },
                        "description": "Ordering\n\n* `created_at` - Created at\n* `-created_at` - Created at (décroissant)\n* `updated_at` - Updated at\n* `-updated_at` - Updated at (décroissant)",
                        "explode": false,
                        "style": "form"
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "start_stop_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "start_time_after",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "in": "query",
                        "name": "start_time_before",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedTripList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "tracking_trips_create",
                "description": "API endpoint for trips.",
                "tags": [
                    "tracking"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TripCreateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/TripCreateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/TripCreateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TripCreate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/tracking/trips/{id}/": {
            "get": {
                "operationId": "tracking_trips_retrieve",
                "description": "API endpoint for trips.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this trip.",
                        "required": true
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Trip"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "tracking_trips_partial_update",
                "description": "API endpoint for trips.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this trip.",
                        "required": true
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedTripUpdateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedTripUpdateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedTripUpdateRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TripUpdate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "tracking_trips_destroy",
                "description": "API endpoint for trips.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this trip.",
                        "required": true
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/v1/tracking/trips/{id}/end/": {
            "post": {
                "operationId": "tracking_trips_end_create",
                "description": "End a trip.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this trip.",
                        "required": true
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TripRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/TripRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/TripRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Trip"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/tracking/trips/{id}/statistics/": {
            "get": {
                "operationId": "tracking_trips_statistics_retrieve",
                "description": "Get statistics for a trip.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this trip.",
                        "required": true
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Trip"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/tracking/waiting-passengers/": {
            "get": {
                "operationId": "tracking_waiting_passengers_list",
                "description": "API endpoint for waiting passengers.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "created_after",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "in": "query",
                        "name": "created_before",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "in": "query",
                        "name": "line_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "max_count",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "min_count",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "order_by",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "-created_at",
                                    "-updated_at",
                                    "created_at",
                                    "updated_at"
                                ]
                            }
                        },
                        "description": "Ordering\n\n* `created_at` - Created at\n* `-created_at` - Created at (décroissant)\n* `updated_at` - Updated at\n* `-updated_at` - Updated at (décroissant)",
                        "explode": false,
                        "style": "form"
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page_size",
                        "required": false,
                        "in": "query",
                        "description": "Number of results to return per page.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "reported_by_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "stop_id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedWaitingPassengersList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "tracking_waiting_passengers_create",
                "description": "API endpoint for waiting passengers.",
                "tags": [
                    "tracking"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WaitingPassengersCreateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WaitingPassengersCreateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/WaitingPassengersCreateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WaitingPassengersCreate"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/tracking/waiting-passengers/{id}/": {
            "get": {
                "operationId": "tracking_waiting_passengers_retrieve",
                "description": "API endpoint for waiting passengers.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this waiting passengers.",
                        "required": true
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WaitingPassengers"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "tracking_waiting_passengers_partial_update",
                "description": "API endpoint for waiting passengers.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this waiting passengers.",
                        "required": true
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedWaitingPassengersRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedWaitingPassengersRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedWaitingPassengersRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WaitingPassengers"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "tracking_waiting_passengers_destroy",
                "description": "API endpoint for waiting passengers.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "A UUID string identifying this waiting passengers.",
                        "required": true
                    }
                ],
                "tags": [
                    "tracking"
                ],
                "security": [
                    {
                        "jwtAuth": []
                    },
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Achievement": {
                "type": "object",
                "description": "Serializer for Achievement model.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "description": {
                        "type": "string"
                    },
                    "icon": {
                        "type": "string",
                        "description": "Icon identifier or emoji",
                        "maxLength": 50
                    },
                    "achievement_type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AchievementTypeEnum"
                            }
                        ],
                        "title": "Type"
                    },
                    "threshold_value": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "description": "Value needed to unlock"
                    },
                    "points_reward": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648
                    },
                    "rarity": {
                        "$ref": "#/components/schemas/RarityEnum"
                    },
                    "is_unlocked": {
                        "type": "boolean",
                        "description": "Check if user has unlocked this achievement.",
                        "readOnly": true
                    },
                    "progress": {
                        "type": "integer",
                        "description": "Get user's progress towards this achievement.",
                        "readOnly": true
                    },
                    "progress_percentage": {
                        "type": "number",
                        "format": "double",
                        "description": "Get progress percentage.",
                        "readOnly": true
                    }
                },
                "required": [
                    "achievement_type",
                    "description",
                    "icon",
                    "id",
                    "is_unlocked",
                    "name",
                    "progress",
                    "progress_percentage"
                ]
            },
            "AchievementTypeEnum": {
                "enum": [
                    "trips",
                    "distance",
                    "streak",
                    "eco",
                    "social",
                    "special",
                    "level"
                ],
                "type": "string",
                "description": "* `trips` - Number of Trips\n* `distance` - Distance Traveled\n* `streak` - Day Streak\n* `eco` - Environmental Impact\n* `social` - Social Engagement\n* `special` - Special Achievement\n* `level` - Level Based"
            },
            "AddStopToLine": {
                "type": "object",
                "description": "Serializer for adding a stop to a line.",
                "properties": {
                    "stop_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "order": {
                        "type": "integer",
                        "minimum": 0
                    },
                    "distance_from_previous": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,8}(?:\\.\\d{0,2})?$"
                    },
                    "average_time_from_previous": {
                        "type": "integer"
                    }
                },
                "required": [
                    "order",
                    "stop_id"
                ]
            },
            "AddStopToLineRequest": {
                "type": "object",
                "description": "Serializer for adding a stop to a line.",
                "properties": {
                    "stop_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "order": {
                        "type": "integer",
                        "minimum": 0
                    },
                    "distance_from_previous": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,8}(?:\\.\\d{0,2})?$"
                    },
                    "average_time_from_previous": {
                        "type": "integer"
                    }
                },
                "required": [
                    "order",
                    "stop_id"
                ]
            },
            "Anomaly": {
                "type": "object",
                "description": "Serializer for anomalies.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "bus": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "trip": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "type": {
                        "$ref": "#/components/schemas/TypeEnum"
                    },
                    "description": {
                        "type": "string"
                    },
                    "severity": {
                        "$ref": "#/components/schemas/SeverityEnum"
                    },
                    "location_latitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$",
                        "nullable": true,
                        "title": "Latitude"
                    },
                    "location_longitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$",
                        "nullable": true,
                        "title": "Longitude"
                    },
                    "resolved": {
                        "type": "boolean"
                    },
                    "resolved_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "resolution_notes": {
                        "type": "string"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "bus",
                    "created_at",
                    "description",
                    "id",
                    "type",
                    "updated_at"
                ]
            },
            "AnomalyCreate": {
                "type": "object",
                "description": "Serializer for creating anomalies.",
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/TypeEnum"
                    },
                    "description": {
                        "type": "string"
                    },
                    "severity": {
                        "$ref": "#/components/schemas/SeverityEnum"
                    },
                    "location_latitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$",
                        "nullable": true,
                        "title": "Latitude"
                    },
                    "location_longitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$",
                        "nullable": true,
                        "title": "Longitude"
                    }
                },
                "required": [
                    "description",
                    "type"
                ]
            },
            "AnomalyCreateRequest": {
                "type": "object",
                "description": "Serializer for creating anomalies.",
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/TypeEnum"
                    },
                    "description": {
                        "type": "string",
                        "minLength": 1
                    },
                    "severity": {
                        "$ref": "#/components/schemas/SeverityEnum"
                    },
                    "location_latitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$",
                        "nullable": true,
                        "title": "Latitude"
                    },
                    "location_longitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$",
                        "nullable": true,
                        "title": "Longitude"
                    }
                },
                "required": [
                    "description",
                    "type"
                ]
            },
            "AnomalyResolve": {
                "type": "object",
                "description": "Serializer for resolving anomalies.",
                "properties": {
                    "resolution_notes": {
                        "type": "string"
                    }
                }
            },
            "AnomalyResolveRequest": {
                "type": "object",
                "description": "Serializer for resolving anomalies.",
                "properties": {
                    "resolution_notes": {
                        "type": "string"
                    }
                }
            },
            "Bus": {
                "type": "object",
                "description": "Serializer for buses.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "license_plate": {
                        "type": "string",
                        "maxLength": 15
                    },
                    "driver": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "driver_details": {
                        "type": "object",
                        "additionalProperties": {},
                        "description": "Get driver details if expand_driver is True.",
                        "readOnly": true
                    },
                    "model": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "manufacturer": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "year": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0
                    },
                    "capacity": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0,
                        "description": "Maximum number of passengers"
                    },
                    "status": {
                        "$ref": "#/components/schemas/StatusF64Enum"
                    },
                    "is_air_conditioned": {
                        "type": "boolean",
                        "title": "Air conditioned"
                    },
                    "photo": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true
                    },
                    "features": {
                        "description": "Additional features of the bus"
                    },
                    "description": {
                        "type": "string"
                    },
                    "is_active": {
                        "type": "boolean",
                        "title": "Active"
                    },
                    "is_approved": {
                        "type": "boolean",
                        "title": "Approved"
                    },
                    "current_location": {
                        "type": "object",
                        "additionalProperties": {},
                        "description": "Get current location if expand_location is True.",
                        "readOnly": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "capacity",
                    "created_at",
                    "current_location",
                    "driver",
                    "driver_details",
                    "id",
                    "license_plate",
                    "manufacturer",
                    "model",
                    "updated_at",
                    "year"
                ]
            },
            "BusApprove": {
                "type": "object",
                "description": "Serializer for approving buses.",
                "properties": {
                    "approve": {
                        "type": "boolean"
                    },
                    "reason": {
                        "type": "string"
                    }
                },
                "required": [
                    "approve"
                ]
            },
            "BusApproveRequest": {
                "type": "object",
                "description": "Serializer for approving buses.",
                "properties": {
                    "approve": {
                        "type": "boolean"
                    },
                    "reason": {
                        "type": "string"
                    }
                },
                "required": [
                    "approve"
                ]
            },
            "BusArrivalEstimate": {
                "type": "object",
                "description": "Serializer for bus arrival estimates.",
                "properties": {
                    "bus": {
                        "type": "object",
                        "additionalProperties": {}
                    },
                    "driver": {
                        "type": "object",
                        "additionalProperties": {},
                        "nullable": true
                    },
                    "line": {
                        "type": "object",
                        "additionalProperties": {}
                    },
                    "current_location": {
                        "type": "object",
                        "additionalProperties": {}
                    },
                    "eta": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "eta_minutes": {
                        "type": "integer"
                    },
                    "reliability": {
                        "type": "number",
                        "format": "double"
                    },
                    "last_update": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "bus",
                    "current_location",
                    "driver",
                    "eta",
                    "eta_minutes",
                    "last_update",
                    "line",
                    "reliability"
                ]
            },
            "BusBrief": {
                "type": "object",
                "description": "Brief serializer for buses.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "bus_number": {
                        "type": "string",
                        "readOnly": true
                    },
                    "license_plate": {
                        "type": "string",
                        "maxLength": 15
                    },
                    "status": {
                        "$ref": "#/components/schemas/StatusF64Enum"
                    }
                },
                "required": [
                    "bus_number",
                    "id",
                    "license_plate"
                ]
            },
            "BusBriefRequest": {
                "type": "object",
                "description": "Brief serializer for buses.",
                "properties": {
                    "license_plate": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 15
                    },
                    "status": {
                        "$ref": "#/components/schemas/StatusF64Enum"
                    }
                },
                "required": [
                    "license_plate"
                ]
            },
            "BusCreate": {
                "type": "object",
                "description": "Serializer for creating buses.",
                "properties": {
                    "license_plate": {
                        "type": "string",
                        "maxLength": 15
                    },
                    "driver": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "model": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "manufacturer": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "year": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0
                    },
                    "capacity": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0,
                        "description": "Maximum number of passengers"
                    },
                    "is_air_conditioned": {
                        "type": "boolean",
                        "title": "Air conditioned"
                    },
                    "photo": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true
                    },
                    "features": {
                        "description": "Additional features of the bus"
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "required": [
                    "capacity",
                    "driver",
                    "license_plate",
                    "manufacturer",
                    "model",
                    "year"
                ]
            },
            "BusCreateRequest": {
                "type": "object",
                "description": "Serializer for creating buses.",
                "properties": {
                    "license_plate": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 15
                    },
                    "driver": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "model": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "manufacturer": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "year": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0
                    },
                    "capacity": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0,
                        "description": "Maximum number of passengers"
                    },
                    "is_air_conditioned": {
                        "type": "boolean",
                        "title": "Air conditioned"
                    },
                    "photo": {
                        "type": "string",
                        "format": "binary",
                        "nullable": true
                    },
                    "features": {
                        "description": "Additional features of the bus"
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "required": [
                    "capacity",
                    "driver",
                    "license_plate",
                    "manufacturer",
                    "model",
                    "year"
                ]
            },
            "BusLine": {
                "type": "object",
                "description": "Serializer for bus-line assignments.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "bus": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "bus_details": {
                        "type": "object",
                        "additionalProperties": {},
                        "description": "Get bus details if expand_bus is True.",
                        "readOnly": true
                    },
                    "line": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "line_details": {
                        "type": "object",
                        "additionalProperties": {},
                        "description": "Get line details if expand_line is True.",
                        "readOnly": true
                    },
                    "is_active": {
                        "type": "boolean",
                        "title": "Active"
                    },
                    "tracking_status": {
                        "$ref": "#/components/schemas/TrackingStatusEnum"
                    },
                    "trip_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "description": "ID of the current trip"
                    },
                    "start_time": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "end_time": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "bus",
                    "bus_details",
                    "created_at",
                    "id",
                    "line",
                    "line_details",
                    "updated_at"
                ]
            },
            "BusLineCreate": {
                "type": "object",
                "description": "Serializer for creating bus-line assignments.",
                "properties": {
                    "bus": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "line": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "required": [
                    "bus",
                    "line"
                ]
            },
            "BusLineCreateRequest": {
                "type": "object",
                "description": "Serializer for creating bus-line assignments.",
                "properties": {
                    "bus": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "line": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "required": [
                    "bus",
                    "line"
                ]
            },
            "BusLocation": {
                "type": "object",
                "description": "Serializer for bus locations.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "bus": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "latitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$"
                    },
                    "longitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$"
                    },
                    "altitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,8}(?:\\.\\d{0,2})?$",
                        "nullable": true
                    },
                    "speed": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,2})?$",
                        "nullable": true,
                        "description": "Speed in km/h"
                    },
                    "heading": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,2})?$",
                        "nullable": true,
                        "description": "Heading in degrees (0-360)"
                    },
                    "accuracy": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,2})?$",
                        "nullable": true,
                        "description": "Accuracy in meters"
                    },
                    "is_tracking_active": {
                        "type": "boolean",
                        "title": "Tracking active"
                    },
                    "passenger_count": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "bus",
                    "created_at",
                    "id",
                    "latitude",
                    "longitude",
                    "updated_at"
                ]
            },
            "BusLocationUpdate": {
                "type": "object",
                "description": "Serializer for updating bus location.",
                "properties": {
                    "latitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$"
                    },
                    "longitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$"
                    },
                    "altitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,8}(?:\\.\\d{0,2})?$"
                    },
                    "speed": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,2})?$"
                    },
                    "heading": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,2})?$"
                    },
                    "accuracy": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,2})?$"
                    },
                    "passenger_count": {
                        "type": "integer",
                        "minimum": 0
                    }
                },
                "required": [
                    "latitude",
                    "longitude"
                ]
            },
            "BusLocationUpdateRequest": {
                "type": "object",
                "description": "Serializer for updating bus location.",
                "properties": {
                    "latitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$"
                    },
                    "longitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$"
                    },
                    "altitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,8}(?:\\.\\d{0,2})?$"
                    },
                    "speed": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,2})?$"
                    },
                    "heading": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,2})?$"
                    },
                    "accuracy": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,2})?$"
                    },
                    "passenger_count": {
                        "type": "integer",
                        "minimum": 0
                    }
                },
                "required": [
                    "latitude",
                    "longitude"
                ]
            },
            "BusRequest": {
                "type": "object",
                "description": "Serializer for buses.",
                "properties": {
                    "license_plate": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 15
                    },
                    "driver": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "model": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "manufacturer": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "year": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0
                    },
                    "capacity": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0,
                        "description": "Maximum number of passengers"
                    },
                    "status": {
                        "$ref": "#/components/schemas/StatusF64Enum"
                    },
                    "is_air_conditioned": {
                        "type": "boolean",
                        "title": "Air conditioned"
                    },
                    "photo": {
                        "type": "string",
                        "format": "binary",
                        "nullable": true
                    },
                    "features": {
                        "description": "Additional features of the bus"
                    },
                    "description": {
                        "type": "string"
                    },
                    "is_active": {
                        "type": "boolean",
                        "title": "Active"
                    },
                    "is_approved": {
                        "type": "boolean",
                        "title": "Approved"
                    }
                },
                "required": [
                    "capacity",
                    "driver",
                    "license_plate",
                    "manufacturer",
                    "model",
                    "year"
                ]
            },
            "BusRoute": {
                "type": "object",
                "description": "Main serializer for bus route estimation.",
                "properties": {
                    "bus_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "bus_number": {
                        "type": "string"
                    },
                    "driver": {
                        "type": "object",
                        "additionalProperties": {},
                        "nullable": true
                    },
                    "current_location": {
                        "$ref": "#/components/schemas/CurrentLocation"
                    },
                    "trip": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/TripInfo"
                            }
                        ],
                        "nullable": true
                    },
                    "estimated_path": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PathSegment"
                        }
                    },
                    "remaining_stops": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StopLocation"
                        }
                    },
                    "historical_data": {
                        "type": "object",
                        "additionalProperties": {}
                    },
                    "traffic_conditions": {
                        "$ref": "#/components/schemas/TrafficCondition"
                    },
                    "status": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "required": [
                    "bus_id",
                    "bus_number",
                    "current_location",
                    "driver",
                    "estimated_path",
                    "historical_data",
                    "remaining_stops",
                    "traffic_conditions",
                    "trip"
                ]
            },
            "BusUpdate": {
                "type": "object",
                "description": "Serializer for updating buses.",
                "properties": {
                    "model": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "manufacturer": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "year": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0
                    },
                    "capacity": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0,
                        "description": "Maximum number of passengers"
                    },
                    "status": {
                        "$ref": "#/components/schemas/StatusF64Enum"
                    },
                    "is_air_conditioned": {
                        "type": "boolean",
                        "title": "Air conditioned"
                    },
                    "photo": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true
                    },
                    "features": {
                        "description": "Additional features of the bus"
                    },
                    "description": {
                        "type": "string"
                    },
                    "is_active": {
                        "type": "boolean",
                        "title": "Active"
                    }
                },
                "required": [
                    "capacity",
                    "manufacturer",
                    "model",
                    "year"
                ]
            },
            "CacheConfiguration": {
                "type": "object",
                "description": "Serializer for cache configuration.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "title": "Configuration name",
                        "maxLength": 100
                    },
                    "is_active": {
                        "type": "boolean"
                    },
                    "cache_duration_hours": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "title": "Cache duration (hours)",
                        "description": "How long cached data remains valid"
                    },
                    "max_cache_size_mb": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "title": "Max cache size (MB)",
                        "description": "Maximum size of offline cache per user"
                    },
                    "cache_lines": {
                        "type": "boolean",
                        "title": "Cache lines data"
                    },
                    "cache_stops": {
                        "type": "boolean",
                        "title": "Cache stops data"
                    },
                    "cache_schedules": {
                        "type": "boolean",
                        "title": "Cache schedules data"
                    },
                    "cache_buses": {
                        "type": "boolean",
                        "title": "Cache buses data"
                    },
                    "cache_user_favorites": {
                        "type": "boolean"
                    },
                    "cache_notifications": {
                        "type": "boolean"
                    },
                    "auto_sync_on_connect": {
                        "type": "boolean",
                        "title": "Auto sync on connection"
                    },
                    "sync_interval_minutes": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "title": "Sync interval (minutes)",
                        "description": "How often to sync when online"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "created_at",
                    "id",
                    "name",
                    "updated_at"
                ]
            },
            "CachedData": {
                "type": "object",
                "description": "Serializer for cached data.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "data_type": {
                        "$ref": "#/components/schemas/CachedDataDataTypeEnum"
                    },
                    "data_id": {
                        "type": "string",
                        "description": "ID of the cached object",
                        "maxLength": 100
                    },
                    "data": {
                        "title": "Cached data"
                    },
                    "size_bytes": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "title": "Size (bytes)"
                    },
                    "checksum": {
                        "type": "string",
                        "title": "Data checksum",
                        "maxLength": 64
                    },
                    "expires_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "related_ids": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "maxLength": 100
                        },
                        "title": "Related data IDs"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "created_at",
                    "data",
                    "data_id",
                    "data_type",
                    "id",
                    "updated_at"
                ]
            },
            "CachedDataDataTypeEnum": {
                "enum": [
                    "line",
                    "stop",
                    "schedule",
                    "bus",
                    "favorite",
                    "notification",
                    "route"
                ],
                "type": "string",
                "description": "* `line` - Line\n* `stop` - Stop\n* `schedule` - Schedule\n* `bus` - Bus\n* `favorite` - Favorite\n* `notification` - Notification\n* `route` - Route"
            },
            "Challenge": {
                "type": "object",
                "description": "Serializer for Challenge model.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "description": {
                        "type": "string"
                    },
                    "challenge_type": {
                        "$ref": "#/components/schemas/ChallengeTypeEnum"
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "end_date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "target_value": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "description": "Target to achieve"
                    },
                    "current_value": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648
                    },
                    "progress_percentage": {
                        "type": "string",
                        "readOnly": true
                    },
                    "points_reward": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648
                    },
                    "is_active": {
                        "type": "boolean"
                    },
                    "is_completed": {
                        "type": "boolean"
                    },
                    "is_joined": {
                        "type": "boolean",
                        "description": "Check if user has joined this challenge.",
                        "readOnly": true
                    },
                    "user_progress": {
                        "type": "object",
                        "additionalProperties": {},
                        "description": "Get user's progress in this challenge.",
                        "readOnly": true
                    },
                    "participants_count": {
                        "type": "integer",
                        "description": "Get number of participants.",
                        "readOnly": true
                    },
                    "time_remaining": {
                        "type": "string",
                        "description": "Get time remaining in seconds.",
                        "readOnly": true
                    }
                },
                "required": [
                    "challenge_type",
                    "description",
                    "end_date",
                    "id",
                    "is_joined",
                    "name",
                    "participants_count",
                    "points_reward",
                    "progress_percentage",
                    "start_date",
                    "target_value",
                    "time_remaining",
                    "user_progress"
                ]
            },
            "ChallengeRequest": {
                "type": "object",
                "description": "Serializer for Challenge model.",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "description": {
                        "type": "string",
                        "minLength": 1
                    },
                    "challenge_type": {
                        "$ref": "#/components/schemas/ChallengeTypeEnum"
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "end_date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "target_value": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "description": "Target to achieve"
                    },
                    "current_value": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648
                    },
                    "points_reward": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648
                    },
                    "is_active": {
                        "type": "boolean"
                    },
                    "is_completed": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "challenge_type",
                    "description",
                    "end_date",
                    "name",
                    "points_reward",
                    "start_date",
                    "target_value"
                ]
            },
            "ChallengeTypeEnum": {
                "enum": [
                    "individual",
                    "community",
                    "route",
                    "eco"
                ],
                "type": "string",
                "description": "* `individual` - Individual Challenge\n* `community` - Community Challenge\n* `route` - Route Challenge\n* `eco` - Eco Challenge"
            },
            "ChannelEnum": {
                "enum": [
                    "push",
                    "sms",
                    "email",
                    "in_app"
                ],
                "type": "string",
                "description": "* `push` - Push\n* `sms` - SMS\n* `email` - Email\n* `in_app` - In App"
            },
            "ChannelsEnum": {
                "enum": [
                    "push",
                    "sms",
                    "email",
                    "in_app"
                ],
                "type": "string",
                "description": "* `push` - Push\n* `sms` - SMS\n* `email` - Email\n* `in_app` - In App"
            },
            "CurrentLocation": {
                "type": "object",
                "description": "Serializer for current location data.",
                "properties": {
                    "latitude": {
                        "type": "number",
                        "format": "double"
                    },
                    "longitude": {
                        "type": "number",
                        "format": "double"
                    },
                    "speed": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "heading": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "accuracy": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    }
                },
                "required": [
                    "accuracy",
                    "heading",
                    "latitude",
                    "longitude",
                    "speed",
                    "timestamp"
                ]
            },
            "DataRequest": {
                "type": "object",
                "description": "Serializer for cached data request.",
                "properties": {
                    "data_type": {
                        "$ref": "#/components/schemas/DataType950Enum"
                    },
                    "data_id": {
                        "type": "string",
                        "maxLength": 100
                    }
                },
                "required": [
                    "data_type"
                ]
            },
            "DataRequestRequest": {
                "type": "object",
                "description": "Serializer for cached data request.",
                "properties": {
                    "data_type": {
                        "$ref": "#/components/schemas/DataType950Enum"
                    },
                    "data_id": {
                        "type": "string",
                        "maxLength": 100
                    }
                },
                "required": [
                    "data_type"
                ]
            },
            "DataType950Enum": {
                "enum": [
                    "line",
                    "stop",
                    "schedule",
                    "bus",
                    "favorite",
                    "notification",
                    "route"
                ],
                "type": "string",
                "description": "* `line` - line\n* `stop` - stop\n* `schedule` - schedule\n* `bus` - bus\n* `favorite` - favorite\n* `notification` - notification\n* `route` - route"
            },
            "DayOfWeekEnum": {
                "enum": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                "type": "integer",
                "description": "* `0` - Monday\n* `1` - Tuesday\n* `2` - Wednesday\n* `3` - Thursday\n* `4` - Friday\n* `5` - Saturday\n* `6` - Sunday"
            },
            "DeviceToken": {
                "type": "object",
                "description": "Serializer for DeviceToken model.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "token": {
                        "type": "string"
                    },
                    "device_type": {
                        "$ref": "#/components/schemas/DeviceTypeEnum"
                    },
                    "is_active": {
                        "type": "boolean",
                        "title": "Active"
                    },
                    "last_used": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "created_at",
                    "device_type",
                    "id",
                    "last_used",
                    "token"
                ]
            },
            "DeviceTokenRequest": {
                "type": "object",
                "description": "Serializer for DeviceToken model.",
                "properties": {
                    "token": {
                        "type": "string",
                        "minLength": 1
                    },
                    "device_type": {
                        "$ref": "#/components/schemas/DeviceTypeEnum"
                    },
                    "is_active": {
                        "type": "boolean",
                        "title": "Active"
                    }
                },
                "required": [
                    "device_type",
                    "token"
                ]
            },
            "DeviceTypeEnum": {
                "enum": [
                    "ios",
                    "android",
                    "web"
                ],
                "type": "string",
                "description": "* `ios` - iOS\n* `android` - Android\n* `web` - Web"
            },
            "Driver": {
                "type": "object",
                "description": "Serializer for drivers.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "user": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "user_details": {
                        "type": "object",
                        "additionalProperties": {},
                        "description": "Get user details if expand_user is True.",
                        "readOnly": true
                    },
                    "full_name": {
                        "type": "string",
                        "description": "Get driver's full name.",
                        "readOnly": true
                    },
                    "phone_number": {
                        "type": "string",
                        "maxLength": 20
                    },
                    "id_card_number": {
                        "type": "string",
                        "maxLength": 20
                    },
                    "id_card_photo": {
                        "type": "string",
                        "format": "uri"
                    },
                    "driver_license_number": {
                        "type": "string",
                        "maxLength": 20
                    },
                    "driver_license_photo": {
                        "type": "string",
                        "format": "uri"
                    },
                    "status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/DriverStatusEnum"
                            }
                        ],
                        "readOnly": true
                    },
                    "status_changed_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "rejection_reason": {
                        "type": "string",
                        "readOnly": true
                    },
                    "years_of_experience": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0
                    },
                    "is_active": {
                        "type": "boolean",
                        "title": "Active"
                    },
                    "is_available": {
                        "type": "boolean",
                        "title": "Available"
                    },
                    "rating": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,1}(?:\\.\\d{0,2})?$",
                        "readOnly": true
                    },
                    "total_ratings": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "created_at",
                    "driver_license_number",
                    "driver_license_photo",
                    "full_name",
                    "id",
                    "id_card_number",
                    "id_card_photo",
                    "phone_number",
                    "rating",
                    "rejection_reason",
                    "status",
                    "status_changed_at",
                    "total_ratings",
                    "updated_at",
                    "user",
                    "user_details"
                ]
            },
            "DriverApprove": {
                "type": "object",
                "description": "Serializer for approving drivers.",
                "properties": {
                    "approve": {
                        "type": "boolean"
                    },
                    "rejection_reason": {
                        "type": "string"
                    }
                },
                "required": [
                    "approve"
                ]
            },
            "DriverApproveRequest": {
                "type": "object",
                "description": "Serializer for approving drivers.",
                "properties": {
                    "approve": {
                        "type": "boolean"
                    },
                    "rejection_reason": {
                        "type": "string"
                    }
                },
                "required": [
                    "approve"
                ]
            },
            "DriverAvailability": {
                "type": "object",
                "description": "Serializer for updating driver availability.",
                "properties": {
                    "is_available": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "is_available"
                ]
            },
            "DriverAvailabilityRequest": {
                "type": "object",
                "description": "Serializer for updating driver availability.",
                "properties": {
                    "is_available": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "is_available"
                ]
            },
            "DriverCreate": {
                "type": "object",
                "description": "Serializer for creating drivers.",
                "properties": {
                    "user": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "phone_number": {
                        "type": "string",
                        "maxLength": 20
                    },
                    "id_card_number": {
                        "type": "string",
                        "maxLength": 20
                    },
                    "id_card_photo": {
                        "type": "string",
                        "format": "uri"
                    },
                    "driver_license_number": {
                        "type": "string",
                        "maxLength": 20
                    },
                    "driver_license_photo": {
                        "type": "string",
                        "format": "uri"
                    },
                    "years_of_experience": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0
                    }
                },
                "required": [
                    "driver_license_number",
                    "driver_license_photo",
                    "id_card_number",
                    "id_card_photo",
                    "phone_number",
                    "user"
                ]
            },
            "DriverCreateRequest": {
                "type": "object",
                "description": "Serializer for creating drivers.",
                "properties": {
                    "user": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "phone_number": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 20
                    },
                    "id_card_number": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 20
                    },
                    "id_card_photo": {
                        "type": "string",
                        "format": "binary"
                    },
                    "driver_license_number": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 20
                    },
                    "driver_license_photo": {
                        "type": "string",
                        "format": "binary"
                    },
                    "years_of_experience": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0
                    }
                },
                "required": [
                    "driver_license_number",
                    "driver_license_photo",
                    "id_card_number",
                    "id_card_photo",
                    "phone_number",
                    "user"
                ]
            },
            "DriverRating": {
                "type": "object",
                "description": "Serializer for driver ratings.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "driver": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "user": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "user_name": {
                        "type": "string",
                        "description": "Get user name.",
                        "readOnly": true
                    },
                    "rating": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RatingEnum"
                            }
                        ],
                        "minimum": 1,
                        "maximum": 5
                    },
                    "comment": {
                        "type": "string"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "created_at",
                    "driver",
                    "id",
                    "rating",
                    "updated_at",
                    "user_name"
                ]
            },
            "DriverRatingCreate": {
                "type": "object",
                "description": "Serializer for creating driver ratings.",
                "properties": {
                    "rating": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RatingEnum"
                            }
                        ],
                        "minimum": 1,
                        "maximum": 5
                    },
                    "comment": {
                        "type": "string"
                    }
                },
                "required": [
                    "rating"
                ]
            },
            "DriverRatingCreateRequest": {
                "type": "object",
                "description": "Serializer for creating driver ratings.",
                "properties": {
                    "rating": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RatingEnum"
                            }
                        ],
                        "minimum": 1,
                        "maximum": 5
                    },
                    "comment": {
                        "type": "string"
                    }
                },
                "required": [
                    "rating"
                ]
            },
            "DriverRegistration": {
                "type": "object",
                "description": "Serializer for driver registration.",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email"
                    },
                    "first_name": {
                        "type": "string"
                    },
                    "last_name": {
                        "type": "string"
                    },
                    "phone_number": {
                        "type": "string"
                    },
                    "id_card_number": {
                        "type": "string"
                    },
                    "id_card_photo": {
                        "type": "string",
                        "format": "uri"
                    },
                    "driver_license_number": {
                        "type": "string"
                    },
                    "driver_license_photo": {
                        "type": "string",
                        "format": "uri"
                    },
                    "years_of_experience": {
                        "type": "integer",
                        "minimum": 0
                    }
                },
                "required": [
                    "driver_license_number",
                    "driver_license_photo",
                    "email",
                    "first_name",
                    "id_card_number",
                    "id_card_photo",
                    "last_name",
                    "phone_number",
                    "years_of_experience"
                ]
            },
            "DriverRegistrationRequest": {
                "type": "object",
                "description": "Serializer for driver registration.",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "minLength": 1
                    },
                    "password": {
                        "type": "string",
                        "writeOnly": true,
                        "minLength": 1
                    },
                    "confirm_password": {
                        "type": "string",
                        "writeOnly": true,
                        "minLength": 1
                    },
                    "first_name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "last_name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "phone_number": {
                        "type": "string",
                        "minLength": 1
                    },
                    "id_card_number": {
                        "type": "string",
                        "minLength": 1
                    },
                    "id_card_photo": {
                        "type": "string",
                        "format": "binary"
                    },
                    "driver_license_number": {
                        "type": "string",
                        "minLength": 1
                    },
                    "driver_license_photo": {
                        "type": "string",
                        "format": "binary"
                    },
                    "years_of_experience": {
                        "type": "integer",
                        "minimum": 0
                    }
                },
                "required": [
                    "confirm_password",
                    "driver_license_number",
                    "driver_license_photo",
                    "email",
                    "first_name",
                    "id_card_number",
                    "id_card_photo",
                    "last_name",
                    "password",
                    "phone_number",
                    "years_of_experience"
                ]
            },
            "DriverStatusEnum": {
                "enum": [
                    "pending",
                    "approved",
                    "rejected",
                    "suspended"
                ],
                "type": "string",
                "description": "* `pending` - Pending\n* `approved` - Approved\n* `rejected` - Rejected\n* `suspended` - Suspended"
            },
            "DriverUpdate": {
                "type": "object",
                "description": "Serializer for updating drivers.",
                "properties": {
                    "phone_number": {
                        "type": "string",
                        "maxLength": 20
                    },
                    "id_card_photo": {
                        "type": "string",
                        "format": "uri"
                    },
                    "driver_license_photo": {
                        "type": "string",
                        "format": "uri"
                    },
                    "years_of_experience": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0
                    },
                    "is_available": {
                        "type": "boolean",
                        "title": "Available"
                    }
                },
                "required": [
                    "driver_license_photo",
                    "id_card_photo",
                    "phone_number"
                ]
            },
            "EmailTokenObtainPair": {
                "type": "object",
                "description": "Custom JWT serializer that accepts email instead of username.",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email"
                    },
                    "password": {
                        "type": "string"
                    }
                },
                "required": [
                    "email",
                    "password"
                ]
            },
            "EmailTokenObtainPairRequest": {
                "type": "object",
                "description": "Custom JWT serializer that accepts email instead of username.",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "minLength": 1
                    },
                    "password": {
                        "type": "string",
                        "minLength": 1
                    }
                },
                "required": [
                    "email",
                    "password"
                ]
            },
            "EstimateArrivalTime": {
                "type": "object",
                "description": "Serializer for estimating arrival time.",
                "properties": {
                    "stop_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "required": [
                    "stop_id"
                ]
            },
            "EstimateArrivalTimeRequest": {
                "type": "object",
                "description": "Serializer for estimating arrival time.",
                "properties": {
                    "stop_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "required": [
                    "stop_id"
                ]
            },
            "LanguageEnum": {
                "enum": [
                    "fr",
                    "ar",
                    "en"
                ],
                "type": "string",
                "description": "* `fr` - French\n* `ar` - Arabic\n* `en` - English"
            },
            "LeaderboardEntry": {
                "type": "object",
                "description": "Serializer for leaderboard entries.",
                "properties": {
                    "rank": {
                        "type": "integer"
                    },
                    "user_id": {
                        "type": "string"
                    },
                    "user_name": {
                        "type": "string"
                    },
                    "points": {
                        "type": "integer"
                    },
                    "trips": {
                        "type": "integer"
                    },
                    "distance": {
                        "type": "number",
                        "format": "double"
                    },
                    "level": {
                        "type": "integer"
                    },
                    "movement": {
                        "type": "integer"
                    }
                },
                "required": [
                    "distance",
                    "level",
                    "movement",
                    "points",
                    "rank",
                    "trips",
                    "user_id",
                    "user_name"
                ]
            },
            "Line": {
                "type": "object",
                "description": "Serializer for lines.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "code": {
                        "type": "string",
                        "maxLength": 20
                    },
                    "description": {
                        "type": "string"
                    },
                    "is_active": {
                        "type": "boolean",
                        "title": "Active"
                    },
                    "color": {
                        "type": "string",
                        "description": "Hex color code for the line (e.g., #FF0000)",
                        "maxLength": 7
                    },
                    "frequency": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0,
                        "nullable": true,
                        "description": "Average frequency in minutes"
                    },
                    "stops": {
                        "type": "array",
                        "items": {},
                        "description": "Get stops for this line if expand_stops is True.",
                        "readOnly": true
                    },
                    "schedules": {
                        "type": "array",
                        "items": {},
                        "description": "Get schedules for this line if expand_schedules is True.",
                        "readOnly": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "code",
                    "created_at",
                    "id",
                    "name",
                    "schedules",
                    "stops",
                    "updated_at"
                ]
            },
            "LineBrief": {
                "type": "object",
                "description": "Brief serializer for lines.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "code": {
                        "type": "string",
                        "maxLength": 20
                    },
                    "is_active": {
                        "type": "boolean",
                        "title": "Active"
                    }
                },
                "required": [
                    "code",
                    "id",
                    "name"
                ]
            },
            "LineBriefRequest": {
                "type": "object",
                "description": "Brief serializer for lines.",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "code": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 20
                    },
                    "is_active": {
                        "type": "boolean",
                        "title": "Active"
                    }
                },
                "required": [
                    "code",
                    "name"
                ]
            },
            "LineCreate": {
                "type": "object",
                "description": "Serializer for creating lines.",
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "code": {
                        "type": "string",
                        "maxLength": 20
                    },
                    "description": {
                        "type": "string"
                    },
                    "color": {
                        "type": "string",
                        "description": "Hex color code for the line (e.g., #FF0000)",
                        "maxLength": 7
                    },
                    "frequency": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0,
                        "nullable": true,
                        "description": "Average frequency in minutes"
                    }
                },
                "required": [
                    "code",
                    "name"
                ]
            },
            "LineCreateRequest": {
                "type": "object",
                "description": "Serializer for creating lines.",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "code": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 20
                    },
                    "description": {
                        "type": "string"
                    },
                    "color": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Hex color code for the line (e.g., #FF0000)",
                        "maxLength": 7
                    },
                    "frequency": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0,
                        "nullable": true,
                        "description": "Average frequency in minutes"
                    }
                },
                "required": [
                    "code",
                    "name"
                ]
            },
            "LineRequest": {
                "type": "object",
                "description": "Serializer for lines.",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "code": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 20
                    },
                    "description": {
                        "type": "string"
                    },
                    "is_active": {
                        "type": "boolean",
                        "title": "Active"
                    },
                    "color": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Hex color code for the line (e.g., #FF0000)",
                        "maxLength": 7
                    },
                    "frequency": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0,
                        "nullable": true,
                        "description": "Average frequency in minutes"
                    }
                },
                "required": [
                    "code",
                    "name"
                ]
            },
            "LineUpdate": {
                "type": "object",
                "description": "Serializer for updating lines.",
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "description": {
                        "type": "string"
                    },
                    "is_active": {
                        "type": "boolean",
                        "title": "Active"
                    },
                    "color": {
                        "type": "string",
                        "description": "Hex color code for the line (e.g., #FF0000)",
                        "maxLength": 7
                    },
                    "frequency": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0,
                        "nullable": true,
                        "description": "Average frequency in minutes"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "LocationUpdate": {
                "type": "object",
                "description": "Serializer for location updates.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "bus": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "latitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$"
                    },
                    "longitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$"
                    },
                    "altitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,8}(?:\\.\\d{0,2})?$",
                        "nullable": true
                    },
                    "speed": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,2})?$",
                        "nullable": true,
                        "description": "Speed in km/h"
                    },
                    "heading": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,2})?$",
                        "nullable": true,
                        "description": "Heading in degrees (0-360)"
                    },
                    "accuracy": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,2})?$",
                        "nullable": true,
                        "description": "Accuracy in meters"
                    },
                    "trip_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "description": "ID of the current trip"
                    },
                    "nearest_stop": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "distance_to_stop": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,8}(?:\\.\\d{0,2})?$",
                        "nullable": true,
                        "description": "Distance to nearest stop in meters"
                    },
                    "line": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "bus",
                    "created_at",
                    "id",
                    "latitude",
                    "longitude",
                    "updated_at"
                ]
            },
            "LocationUpdateCreate": {
                "type": "object",
                "description": "Serializer for creating location updates.",
                "properties": {
                    "latitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$"
                    },
                    "longitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$"
                    },
                    "altitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,8}(?:\\.\\d{0,2})?$",
                        "nullable": true
                    },
                    "speed": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,2})?$",
                        "nullable": true,
                        "description": "Speed in km/h"
                    },
                    "heading": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,2})?$",
                        "nullable": true,
                        "description": "Heading in degrees (0-360)"
                    },
                    "accuracy": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,2})?$",
                        "nullable": true,
                        "description": "Accuracy in meters"
                    }
                },
                "required": [
                    "latitude",
                    "longitude"
                ]
            },
            "LocationUpdateCreateRequest": {
                "type": "object",
                "description": "Serializer for creating location updates.",
                "properties": {
                    "latitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$"
                    },
                    "longitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$"
                    },
                    "altitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,8}(?:\\.\\d{0,2})?$",
                        "nullable": true
                    },
                    "speed": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,2})?$",
                        "nullable": true,
                        "description": "Speed in km/h"
                    },
                    "heading": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,2})?$",
                        "nullable": true,
                        "description": "Heading in degrees (0-360)"
                    },
                    "accuracy": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,2})?$",
                        "nullable": true,
                        "description": "Accuracy in meters"
                    }
                },
                "required": [
                    "latitude",
                    "longitude"
                ]
            },
            "LogTypeEnum": {
                "enum": [
                    "sync_start",
                    "sync_complete",
                    "sync_error",
                    "cache_hit",
                    "cache_miss",
                    "cache_expired",
                    "cache_cleared",
                    "offline_action"
                ],
                "type": "string",
                "description": "* `sync_start` - Sync Started\n* `sync_complete` - Sync Completed\n* `sync_error` - Sync Error\n* `cache_hit` - Cache Hit\n* `cache_miss` - Cache Miss\n* `cache_expired` - Cache Expired\n* `cache_cleared` - Cache Cleared\n* `offline_action` - Offline Action"
            },
            "Notification": {
                "type": "object",
                "description": "Serializer for Notification model.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "user": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/UserBrief"
                            }
                        ],
                        "readOnly": true
                    },
                    "notification_type": {
                        "$ref": "#/components/schemas/NotificationTypeEnum"
                    },
                    "title": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "message": {
                        "type": "string"
                    },
                    "channel": {
                        "$ref": "#/components/schemas/ChannelEnum"
                    },
                    "is_read": {
                        "type": "boolean",
                        "title": "Read"
                    },
                    "read_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "data": {
                        "description": "Additional data for the notification"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "created_at",
                    "id",
                    "message",
                    "notification_type",
                    "title",
                    "user"
                ]
            },
            "NotificationCreate": {
                "type": "object",
                "description": "Serializer for creating notifications.",
                "properties": {
                    "notification_type": {
                        "$ref": "#/components/schemas/NotificationTypeEnum"
                    },
                    "title": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "message": {
                        "type": "string"
                    },
                    "channel": {
                        "$ref": "#/components/schemas/ChannelEnum"
                    },
                    "data": {
                        "description": "Additional data for the notification"
                    }
                },
                "required": [
                    "message",
                    "notification_type",
                    "title"
                ]
            },
            "NotificationCreateRequest": {
                "type": "object",
                "description": "Serializer for creating notifications.",
                "properties": {
                    "notification_type": {
                        "$ref": "#/components/schemas/NotificationTypeEnum"
                    },
                    "title": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 255
                    },
                    "message": {
                        "type": "string",
                        "minLength": 1
                    },
                    "channel": {
                        "$ref": "#/components/schemas/ChannelEnum"
                    },
                    "data": {
                        "description": "Additional data for the notification"
                    }
                },
                "required": [
                    "message",
                    "notification_type",
                    "title"
                ]
            },
            "NotificationPreference": {
                "type": "object",
                "description": "Serializer for NotificationPreference model.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "notification_type": {
                        "$ref": "#/components/schemas/NotificationTypeEnum"
                    },
                    "channels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChannelsEnum"
                        },
                        "description": "Preferred notification channels"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "minutes_before_arrival": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "description": "For arrival notifications"
                    },
                    "quiet_hours_start": {
                        "type": "string",
                        "format": "time",
                        "nullable": true,
                        "description": "Do not send notifications after this time"
                    },
                    "quiet_hours_end": {
                        "type": "string",
                        "format": "time",
                        "nullable": true,
                        "description": "Resume notifications after this time"
                    },
                    "favorite_stops": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StopBrief"
                        },
                        "readOnly": true
                    },
                    "favorite_lines": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LineBrief"
                        },
                        "readOnly": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "created_at",
                    "favorite_lines",
                    "favorite_stops",
                    "id",
                    "notification_type",
                    "updated_at"
                ]
            },
            "NotificationPreferenceRequest": {
                "type": "object",
                "description": "Serializer for NotificationPreference model.",
                "properties": {
                    "notification_type": {
                        "$ref": "#/components/schemas/NotificationTypeEnum"
                    },
                    "channels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChannelsEnum"
                        },
                        "description": "Preferred notification channels"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "minutes_before_arrival": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "description": "For arrival notifications"
                    },
                    "quiet_hours_start": {
                        "type": "string",
                        "format": "time",
                        "nullable": true,
                        "description": "Do not send notifications after this time"
                    },
                    "quiet_hours_end": {
                        "type": "string",
                        "format": "time",
                        "nullable": true,
                        "description": "Resume notifications after this time"
                    },
                    "favorite_stop_ids": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "writeOnly": true
                    },
                    "favorite_line_ids": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "writeOnly": true
                    }
                },
                "required": [
                    "notification_type"
                ]
            },
            "NotificationRequest": {
                "type": "object",
                "description": "Serializer for Notification model.",
                "properties": {
                    "notification_type": {
                        "$ref": "#/components/schemas/NotificationTypeEnum"
                    },
                    "title": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 255
                    },
                    "message": {
                        "type": "string",
                        "minLength": 1
                    },
                    "channel": {
                        "$ref": "#/components/schemas/ChannelEnum"
                    },
                    "is_read": {
                        "type": "boolean",
                        "title": "Read"
                    },
                    "read_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "data": {
                        "description": "Additional data for the notification"
                    }
                },
                "required": [
                    "message",
                    "notification_type",
                    "title"
                ]
            },
            "NotificationSchedule": {
                "type": "object",
                "description": "Serializer for NotificationSchedule model.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "user": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/UserBrief"
                            }
                        ],
                        "readOnly": true
                    },
                    "notification_type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/NotificationTypeEnum"
                            }
                        ],
                        "title": "Type"
                    },
                    "scheduled_for": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "title": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "message": {
                        "type": "string"
                    },
                    "channels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChannelsEnum"
                        },
                        "description": "Channels to send through"
                    },
                    "data": {},
                    "bus": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BusBrief"
                            }
                        ],
                        "readOnly": true
                    },
                    "stop": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/StopBrief"
                            }
                        ],
                        "readOnly": true
                    },
                    "line": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/LineBrief"
                            }
                        ],
                        "readOnly": true
                    },
                    "trip": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/TripBrief"
                            }
                        ],
                        "readOnly": true
                    },
                    "is_sent": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "sent_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true
                    },
                    "error": {
                        "type": "string",
                        "readOnly": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "bus",
                    "created_at",
                    "error",
                    "id",
                    "is_sent",
                    "line",
                    "message",
                    "notification_type",
                    "scheduled_for",
                    "sent_at",
                    "stop",
                    "title",
                    "trip",
                    "updated_at",
                    "user"
                ]
            },
            "NotificationScheduleRequest": {
                "type": "object",
                "description": "Serializer for NotificationSchedule model.",
                "properties": {
                    "notification_type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/NotificationTypeEnum"
                            }
                        ],
                        "title": "Type"
                    },
                    "scheduled_for": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "title": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 255
                    },
                    "message": {
                        "type": "string",
                        "minLength": 1
                    },
                    "channels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChannelsEnum"
                        },
                        "description": "Channels to send through"
                    },
                    "data": {}
                },
                "required": [
                    "message",
                    "notification_type",
                    "scheduled_for",
                    "title"
                ]
            },
            "NotificationTypeEnum": {
                "enum": [
                    "driver_approved",
                    "driver_rejected",
                    "bus_arriving",
                    "bus_delayed",
                    "bus_cancelled",
                    "system",
                    "arrival",
                    "route_change",
                    "seat_availability",
                    "trip_start",
                    "trip_end",
                    "achievement",
                    "reward",
                    "trip_update"
                ],
                "type": "string",
                "description": "* `driver_approved` - Driver Approved\n* `driver_rejected` - Driver Rejected\n* `bus_arriving` - Bus Arriving\n* `bus_delayed` - Bus Delayed\n* `bus_cancelled` - Bus Cancelled\n* `system` - System\n* `arrival` - Bus Arrival\n* `route_change` - Route Change\n* `seat_availability` - Seat Availability\n* `trip_start` - Trip Started\n* `trip_end` - Trip Ended\n* `achievement` - Achievement Unlocked\n* `reward` - Reward Earned\n* `trip_update` - Trip Update"
            },
            "OfflineLog": {
                "type": "object",
                "description": "Serializer for offline logs.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "log_type": {
                        "$ref": "#/components/schemas/LogTypeEnum"
                    },
                    "message": {
                        "type": "string"
                    },
                    "metadata": {},
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "created_at",
                    "id",
                    "log_type",
                    "message"
                ]
            },
            "PaginatedAchievementList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Achievement"
                        }
                    }
                }
            },
            "PaginatedAnomalyList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Anomaly"
                        }
                    }
                }
            },
            "PaginatedBusLineList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BusLine"
                        }
                    }
                }
            },
            "PaginatedBusList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Bus"
                        }
                    }
                }
            },
            "PaginatedBusLocationList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BusLocation"
                        }
                    }
                }
            },
            "PaginatedCacheConfigurationList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CacheConfiguration"
                        }
                    }
                }
            },
            "PaginatedChallengeList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Challenge"
                        }
                    }
                }
            },
            "PaginatedDeviceTokenList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeviceToken"
                        }
                    }
                }
            },
            "PaginatedDriverList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Driver"
                        }
                    }
                }
            },
            "PaginatedDriverRatingList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DriverRating"
                        }
                    }
                }
            },
            "PaginatedLineList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Line"
                        }
                    }
                }
            },
            "PaginatedLocationUpdateList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LocationUpdate"
                        }
                    }
                }
            },
            "PaginatedNotificationList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Notification"
                        }
                    }
                }
            },
            "PaginatedNotificationPreferenceList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NotificationPreference"
                        }
                    }
                }
            },
            "PaginatedNotificationScheduleList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NotificationSchedule"
                        }
                    }
                }
            },
            "PaginatedOfflineLogList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OfflineLog"
                        }
                    }
                }
            },
            "PaginatedPassengerCountList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PassengerCount"
                        }
                    }
                }
            },
            "PaginatedPointTransactionList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PointTransaction"
                        }
                    }
                }
            },
            "PaginatedProfileList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Profile"
                        }
                    }
                }
            },
            "PaginatedRewardList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Reward"
                        }
                    }
                }
            },
            "PaginatedRouteSegmentList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RouteSegment"
                        }
                    }
                }
            },
            "PaginatedScheduleList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Schedule"
                        }
                    }
                }
            },
            "PaginatedStopList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Stop"
                        }
                    }
                }
            },
            "PaginatedSyncQueueList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SyncQueue"
                        }
                    }
                }
            },
            "PaginatedTripList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Trip"
                        }
                    }
                }
            },
            "PaginatedUserList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/User"
                        }
                    }
                }
            },
            "PaginatedWaitingPassengersList": {
                "type": "object",
                "required": [
                    "count",
                    "results"
                ],
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 123
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WaitingPassengers"
                        }
                    }
                }
            },
            "PassengerCount": {
                "type": "object",
                "description": "Serializer for passenger counts.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "bus": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "count": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0
                    },
                    "capacity": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0,
                        "description": "Total capacity of the bus"
                    },
                    "occupancy_rate": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,2})?$",
                        "readOnly": true,
                        "description": "Occupancy rate (0-1)"
                    },
                    "trip_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "description": "ID of the current trip"
                    },
                    "stop": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "description": "Stop where the count was recorded"
                    },
                    "line": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "bus",
                    "capacity",
                    "count",
                    "created_at",
                    "id",
                    "occupancy_rate",
                    "updated_at"
                ]
            },
            "PassengerCountCreate": {
                "type": "object",
                "description": "Serializer for creating passenger counts.",
                "properties": {
                    "count": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0
                    },
                    "stop": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "description": "Stop where the count was recorded"
                    }
                },
                "required": [
                    "count"
                ]
            },
            "PassengerCountCreateRequest": {
                "type": "object",
                "description": "Serializer for creating passenger counts.",
                "properties": {
                    "count": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0
                    },
                    "stop": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "description": "Stop where the count was recorded"
                    }
                },
                "required": [
                    "count"
                ]
            },
            "PassengerCountUpdate": {
                "type": "object",
                "description": "Serializer for updating passenger count.",
                "properties": {
                    "count": {
                        "type": "integer",
                        "minimum": 0
                    }
                },
                "required": [
                    "count"
                ]
            },
            "PassengerCountUpdateRequest": {
                "type": "object",
                "description": "Serializer for updating passenger count.",
                "properties": {
                    "count": {
                        "type": "integer",
                        "minimum": 0
                    }
                },
                "required": [
                    "count"
                ]
            },
            "PasswordChangeRequest": {
                "type": "object",
                "description": "Serializer for changing passwords.",
                "properties": {
                    "current_password": {
                        "type": "string",
                        "writeOnly": true,
                        "minLength": 1
                    },
                    "new_password": {
                        "type": "string",
                        "writeOnly": true,
                        "minLength": 1
                    },
                    "confirm_password": {
                        "type": "string",
                        "writeOnly": true,
                        "minLength": 1
                    }
                },
                "required": [
                    "confirm_password",
                    "current_password",
                    "new_password"
                ]
            },
            "PasswordResetConfirm": {
                "type": "object",
                "description": "Serializer for confirming a password reset.",
                "properties": {
                    "uid": {
                        "type": "string"
                    },
                    "token": {
                        "type": "string"
                    }
                },
                "required": [
                    "token",
                    "uid"
                ]
            },
            "PasswordResetConfirmRequest": {
                "type": "object",
                "description": "Serializer for confirming a password reset.",
                "properties": {
                    "uid": {
                        "type": "string",
                        "minLength": 1
                    },
                    "token": {
                        "type": "string",
                        "minLength": 1
                    },
                    "new_password": {
                        "type": "string",
                        "writeOnly": true,
                        "minLength": 1
                    },
                    "confirm_password": {
                        "type": "string",
                        "writeOnly": true,
                        "minLength": 1
                    }
                },
                "required": [
                    "confirm_password",
                    "new_password",
                    "token",
                    "uid"
                ]
            },
            "PasswordResetRequest": {
                "type": "object",
                "description": "Serializer for requesting a password reset.",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email"
                    }
                },
                "required": [
                    "email"
                ]
            },
            "PasswordResetRequestRequest": {
                "type": "object",
                "description": "Serializer for requesting a password reset.",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "minLength": 1
                    }
                },
                "required": [
                    "email"
                ]
            },
            "PatchedAnomalyRequest": {
                "type": "object",
                "description": "Serializer for anomalies.",
                "properties": {
                    "bus": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "trip": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "type": {
                        "$ref": "#/components/schemas/TypeEnum"
                    },
                    "description": {
                        "type": "string",
                        "minLength": 1
                    },
                    "severity": {
                        "$ref": "#/components/schemas/SeverityEnum"
                    },
                    "location_latitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$",
                        "nullable": true,
                        "title": "Latitude"
                    },
                    "location_longitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$",
                        "nullable": true,
                        "title": "Longitude"
                    },
                    "resolved": {
                        "type": "boolean"
                    },
                    "resolved_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "resolution_notes": {
                        "type": "string"
                    }
                }
            },
            "PatchedBusLineRequest": {
                "type": "object",
                "description": "Serializer for bus-line assignments.",
                "properties": {
                    "bus": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "line": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "is_active": {
                        "type": "boolean",
                        "title": "Active"
                    },
                    "tracking_status": {
                        "$ref": "#/components/schemas/TrackingStatusEnum"
                    },
                    "trip_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "description": "ID of the current trip"
                    },
                    "start_time": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "end_time": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    }
                }
            },
            "PatchedBusUpdateRequest": {
                "type": "object",
                "description": "Serializer for updating buses.",
                "properties": {
                    "model": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "manufacturer": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "year": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0
                    },
                    "capacity": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0,
                        "description": "Maximum number of passengers"
                    },
                    "status": {
                        "$ref": "#/components/schemas/StatusF64Enum"
                    },
                    "is_air_conditioned": {
                        "type": "boolean",
                        "title": "Air conditioned"
                    },
                    "photo": {
                        "type": "string",
                        "format": "binary",
                        "nullable": true
                    },
                    "features": {
                        "description": "Additional features of the bus"
                    },
                    "description": {
                        "type": "string"
                    },
                    "is_active": {
                        "type": "boolean",
                        "title": "Active"
                    }
                }
            },
            "PatchedDeviceTokenRequest": {
                "type": "object",
                "description": "Serializer for DeviceToken model.",
                "properties": {
                    "token": {
                        "type": "string",
                        "minLength": 1
                    },
                    "device_type": {
                        "$ref": "#/components/schemas/DeviceTypeEnum"
                    },
                    "is_active": {
                        "type": "boolean",
                        "title": "Active"
                    }
                }
            },
            "PatchedDriverRatingRequest": {
                "type": "object",
                "description": "Serializer for driver ratings.",
                "properties": {
                    "driver": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "user": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "rating": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RatingEnum"
                            }
                        ],
                        "minimum": 1,
                        "maximum": 5
                    },
                    "comment": {
                        "type": "string"
                    }
                }
            },
            "PatchedDriverUpdateRequest": {
                "type": "object",
                "description": "Serializer for updating drivers.",
                "properties": {
                    "phone_number": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 20
                    },
                    "id_card_photo": {
                        "type": "string",
                        "format": "binary"
                    },
                    "driver_license_photo": {
                        "type": "string",
                        "format": "binary"
                    },
                    "years_of_experience": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0
                    },
                    "is_available": {
                        "type": "boolean",
                        "title": "Available"
                    }
                }
            },
            "PatchedLineUpdateRequest": {
                "type": "object",
                "description": "Serializer for updating lines.",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "description": {
                        "type": "string"
                    },
                    "is_active": {
                        "type": "boolean",
                        "title": "Active"
                    },
                    "color": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Hex color code for the line (e.g., #FF0000)",
                        "maxLength": 7
                    },
                    "frequency": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0,
                        "nullable": true,
                        "description": "Average frequency in minutes"
                    }
                }
            },
            "PatchedLocationUpdateRequest": {
                "type": "object",
                "description": "Serializer for location updates.",
                "properties": {
                    "bus": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "latitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$"
                    },
                    "longitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$"
                    },
                    "altitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,8}(?:\\.\\d{0,2})?$",
                        "nullable": true
                    },
                    "speed": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,2})?$",
                        "nullable": true,
                        "description": "Speed in km/h"
                    },
                    "heading": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,2})?$",
                        "nullable": true,
                        "description": "Heading in degrees (0-360)"
                    },
                    "accuracy": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,2})?$",
                        "nullable": true,
                        "description": "Accuracy in meters"
                    },
                    "trip_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "description": "ID of the current trip"
                    },
                    "nearest_stop": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "distance_to_stop": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,8}(?:\\.\\d{0,2})?$",
                        "nullable": true,
                        "description": "Distance to nearest stop in meters"
                    },
                    "line": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    }
                }
            },
            "PatchedNotificationPreferenceRequest": {
                "type": "object",
                "description": "Serializer for NotificationPreference model.",
                "properties": {
                    "notification_type": {
                        "$ref": "#/components/schemas/NotificationTypeEnum"
                    },
                    "channels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChannelsEnum"
                        },
                        "description": "Preferred notification channels"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "minutes_before_arrival": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "description": "For arrival notifications"
                    },
                    "quiet_hours_start": {
                        "type": "string",
                        "format": "time",
                        "nullable": true,
                        "description": "Do not send notifications after this time"
                    },
                    "quiet_hours_end": {
                        "type": "string",
                        "format": "time",
                        "nullable": true,
                        "description": "Resume notifications after this time"
                    },
                    "favorite_stop_ids": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "writeOnly": true
                    },
                    "favorite_line_ids": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "writeOnly": true
                    }
                }
            },
            "PatchedNotificationRequest": {
                "type": "object",
                "description": "Serializer for Notification model.",
                "properties": {
                    "notification_type": {
                        "$ref": "#/components/schemas/NotificationTypeEnum"
                    },
                    "title": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 255
                    },
                    "message": {
                        "type": "string",
                        "minLength": 1
                    },
                    "channel": {
                        "$ref": "#/components/schemas/ChannelEnum"
                    },
                    "is_read": {
                        "type": "boolean",
                        "title": "Read"
                    },
                    "read_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "data": {
                        "description": "Additional data for the notification"
                    }
                }
            },
            "PatchedPassengerCountRequest": {
                "type": "object",
                "description": "Serializer for passenger counts.",
                "properties": {
                    "bus": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "count": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0
                    },
                    "capacity": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0,
                        "description": "Total capacity of the bus"
                    },
                    "trip_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "description": "ID of the current trip"
                    },
                    "stop": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "description": "Stop where the count was recorded"
                    },
                    "line": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    }
                }
            },
            "PatchedProfileRequest": {
                "type": "object",
                "description": "Serializer for user profiles.",
                "properties": {
                    "avatar": {
                        "type": "string",
                        "format": "binary",
                        "nullable": true
                    },
                    "bio": {
                        "type": "string"
                    },
                    "language": {
                        "$ref": "#/components/schemas/LanguageEnum"
                    },
                    "push_notifications_enabled": {
                        "type": "boolean"
                    },
                    "email_notifications_enabled": {
                        "type": "boolean"
                    },
                    "sms_notifications_enabled": {
                        "type": "boolean"
                    }
                }
            },
            "PatchedProfileUpdateRequest": {
                "type": "object",
                "description": "Serializer for updating profiles.",
                "properties": {
                    "avatar": {
                        "type": "string",
                        "format": "binary",
                        "nullable": true
                    },
                    "bio": {
                        "type": "string"
                    },
                    "language": {
                        "$ref": "#/components/schemas/LanguageEnum"
                    },
                    "push_notifications_enabled": {
                        "type": "boolean"
                    },
                    "email_notifications_enabled": {
                        "type": "boolean"
                    },
                    "sms_notifications_enabled": {
                        "type": "boolean"
                    }
                }
            },
            "PatchedRouteSegmentRequest": {
                "type": "object",
                "description": "Serializer for route segments.",
                "properties": {
                    "from_stop": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "to_stop": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "polyline": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Encoded polyline for the route segment"
                    },
                    "distance": {
                        "type": "number",
                        "format": "double",
                        "description": "Distance in kilometers"
                    },
                    "duration": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "description": "Estimated duration in minutes"
                    }
                }
            },
            "PatchedScheduleRequest": {
                "type": "object",
                "description": "Serializer for schedules.",
                "properties": {
                    "line": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "day_of_week": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/DayOfWeekEnum"
                            }
                        ],
                        "minimum": 0,
                        "maximum": 32767
                    },
                    "start_time": {
                        "type": "string",
                        "format": "time"
                    },
                    "end_time": {
                        "type": "string",
                        "format": "time"
                    },
                    "is_active": {
                        "type": "boolean",
                        "title": "Active"
                    },
                    "frequency_minutes": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0,
                        "description": "Bus frequency in minutes during this schedule"
                    }
                }
            },
            "PatchedStopUpdateRequest": {
                "type": "object",
                "description": "Serializer for updating stops.",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "latitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$"
                    },
                    "longitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$"
                    },
                    "address": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "is_active": {
                        "type": "boolean",
                        "title": "Active"
                    },
                    "description": {
                        "type": "string"
                    },
                    "features": {
                        "description": "Features of the stop (shelter, bench, etc.)"
                    },
                    "photo": {
                        "type": "string",
                        "format": "binary",
                        "nullable": true
                    }
                }
            },
            "PatchedSyncQueueRequest": {
                "type": "object",
                "description": "Serializer for sync queue items.",
                "properties": {
                    "action_type": {
                        "$ref": "#/components/schemas/SyncQueueActionTypeEnum"
                    },
                    "model_name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "object_id": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 100
                    },
                    "data": {
                        "title": "Action data"
                    },
                    "status": {
                        "$ref": "#/components/schemas/SyncQueueStatusEnum"
                    },
                    "priority": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "description": "Higher values are synced first"
                    }
                }
            },
            "PatchedTripUpdateRequest": {
                "type": "object",
                "description": "Serializer for updating trips.",
                "properties": {
                    "end_time": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "end_stop": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "notes": {
                        "type": "string"
                    }
                }
            },
            "PatchedUserProfileRequest": {
                "type": "object",
                "description": "Serializer for UserProfile model.",
                "properties": {
                    "receive_achievement_notifications": {
                        "type": "boolean"
                    },
                    "display_on_leaderboard": {
                        "type": "boolean"
                    }
                }
            },
            "PatchedUserUpdateRequest": {
                "type": "object",
                "description": "Serializer for updating users.",
                "properties": {
                    "first_name": {
                        "type": "string",
                        "maxLength": 150
                    },
                    "last_name": {
                        "type": "string",
                        "maxLength": 150
                    },
                    "phone_number": {
                        "type": "string",
                        "maxLength": 20
                    }
                }
            },
            "PatchedWaitingPassengersRequest": {
                "type": "object",
                "description": "Serializer for waiting passengers.",
                "properties": {
                    "stop": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "line": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "count": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0
                    },
                    "reported_by": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    }
                }
            },
            "PathSegment": {
                "type": "object",
                "description": "Serializer for path segments.",
                "properties": {
                    "from_location": {
                        "type": "object",
                        "additionalProperties": {}
                    },
                    "to": {
                        "type": "object",
                        "additionalProperties": {}
                    },
                    "distance": {
                        "type": "number",
                        "format": "double"
                    },
                    "estimated_duration": {
                        "type": "integer"
                    },
                    "estimated_arrival": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "distance",
                    "estimated_arrival",
                    "estimated_duration",
                    "from_location",
                    "to"
                ]
            },
            "PointTransaction": {
                "type": "object",
                "description": "Serializer for PointTransaction model.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "transaction_type": {
                        "$ref": "#/components/schemas/TransactionTypeEnum"
                    },
                    "points": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648
                    },
                    "description": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "created_at",
                    "description",
                    "id",
                    "points",
                    "transaction_type"
                ]
            },
            "Profile": {
                "type": "object",
                "description": "Serializer for user profiles.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "avatar": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true
                    },
                    "bio": {
                        "type": "string"
                    },
                    "language": {
                        "$ref": "#/components/schemas/LanguageEnum"
                    },
                    "push_notifications_enabled": {
                        "type": "boolean"
                    },
                    "email_notifications_enabled": {
                        "type": "boolean"
                    },
                    "sms_notifications_enabled": {
                        "type": "boolean"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "created_at",
                    "id",
                    "updated_at"
                ]
            },
            "ProfileRequest": {
                "type": "object",
                "description": "Serializer for user profiles.",
                "properties": {
                    "avatar": {
                        "type": "string",
                        "format": "binary",
                        "nullable": true
                    },
                    "bio": {
                        "type": "string"
                    },
                    "language": {
                        "$ref": "#/components/schemas/LanguageEnum"
                    },
                    "push_notifications_enabled": {
                        "type": "boolean"
                    },
                    "email_notifications_enabled": {
                        "type": "boolean"
                    },
                    "sms_notifications_enabled": {
                        "type": "boolean"
                    }
                }
            },
            "ProfileUpdate": {
                "type": "object",
                "description": "Serializer for updating profiles.",
                "properties": {
                    "avatar": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true
                    },
                    "bio": {
                        "type": "string"
                    },
                    "language": {
                        "$ref": "#/components/schemas/LanguageEnum"
                    },
                    "push_notifications_enabled": {
                        "type": "boolean"
                    },
                    "email_notifications_enabled": {
                        "type": "boolean"
                    },
                    "sms_notifications_enabled": {
                        "type": "boolean"
                    }
                }
            },
            "QueueAction": {
                "type": "object",
                "description": "Serializer for queuing offline actions.",
                "properties": {
                    "action_type": {
                        "$ref": "#/components/schemas/QueueActionActionTypeEnum"
                    },
                    "model_name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "object_id": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "data": {},
                    "priority": {
                        "type": "integer",
                        "default": 0
                    }
                },
                "required": [
                    "action_type",
                    "data",
                    "model_name"
                ]
            },
            "QueueActionActionTypeEnum": {
                "enum": [
                    "create",
                    "update",
                    "delete"
                ],
                "type": "string",
                "description": "* `create` - create\n* `update` - update\n* `delete` - delete"
            },
            "QueueActionRequest": {
                "type": "object",
                "description": "Serializer for queuing offline actions.",
                "properties": {
                    "action_type": {
                        "$ref": "#/components/schemas/QueueActionActionTypeEnum"
                    },
                    "model_name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "object_id": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "data": {},
                    "priority": {
                        "type": "integer",
                        "default": 0
                    }
                },
                "required": [
                    "action_type",
                    "data",
                    "model_name"
                ]
            },
            "RarityEnum": {
                "enum": [
                    "common",
                    "uncommon",
                    "rare",
                    "epic",
                    "legendary"
                ],
                "type": "string",
                "description": "* `common` - Common\n* `uncommon` - Uncommon\n* `rare` - Rare\n* `epic` - Epic\n* `legendary` - Legendary"
            },
            "RatingEnum": {
                "enum": [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                "type": "integer",
                "description": "* `1` - 1\n* `2` - 2\n* `3` - 3\n* `4` - 4\n* `5` - 5"
            },
            "RemoveStopFromLine": {
                "type": "object",
                "description": "Serializer for removing a stop from a line.",
                "properties": {
                    "stop_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "required": [
                    "stop_id"
                ]
            },
            "RemoveStopFromLineRequest": {
                "type": "object",
                "description": "Serializer for removing a stop from a line.",
                "properties": {
                    "stop_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "required": [
                    "stop_id"
                ]
            },
            "Reward": {
                "type": "object",
                "description": "Serializer for Reward model.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "description": {
                        "type": "string"
                    },
                    "reward_type": {
                        "$ref": "#/components/schemas/RewardTypeEnum"
                    },
                    "points_cost": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648
                    },
                    "quantity_available": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "description": "-1 for unlimited"
                    },
                    "quantity_redeemed": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648
                    },
                    "valid_from": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "valid_until": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "image": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true
                    },
                    "partner_name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "is_available": {
                        "type": "string",
                        "readOnly": true
                    },
                    "can_afford": {
                        "type": "boolean",
                        "description": "Check if user can afford this reward.",
                        "readOnly": true
                    }
                },
                "required": [
                    "can_afford",
                    "description",
                    "id",
                    "is_available",
                    "name",
                    "points_cost",
                    "reward_type",
                    "valid_from",
                    "valid_until"
                ]
            },
            "RewardRequest": {
                "type": "object",
                "description": "Serializer for Reward model.",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "description": {
                        "type": "string",
                        "minLength": 1
                    },
                    "reward_type": {
                        "$ref": "#/components/schemas/RewardTypeEnum"
                    },
                    "points_cost": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648
                    },
                    "quantity_available": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "description": "-1 for unlimited"
                    },
                    "quantity_redeemed": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648
                    },
                    "valid_from": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "valid_until": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "image": {
                        "type": "string",
                        "format": "binary",
                        "nullable": true
                    },
                    "partner_name": {
                        "type": "string",
                        "maxLength": 100
                    }
                },
                "required": [
                    "description",
                    "name",
                    "points_cost",
                    "reward_type",
                    "valid_from",
                    "valid_until"
                ]
            },
            "RewardTypeEnum": {
                "enum": [
                    "discount",
                    "free_ride",
                    "merchandise",
                    "donation",
                    "special"
                ],
                "type": "string",
                "description": "* `discount` - Discount Code\n* `free_ride` - Free Ride\n* `merchandise` - Merchandise\n* `donation` - Charity Donation\n* `special` - Special Reward"
            },
            "RouteSegment": {
                "type": "object",
                "description": "Serializer for route segments.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "from_stop": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "from_stop_name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "to_stop": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "to_stop_name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "polyline": {
                        "type": "string",
                        "description": "Encoded polyline for the route segment"
                    },
                    "distance": {
                        "type": "number",
                        "format": "double",
                        "description": "Distance in kilometers"
                    },
                    "duration": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "description": "Estimated duration in minutes"
                    }
                },
                "required": [
                    "distance",
                    "duration",
                    "from_stop",
                    "from_stop_name",
                    "id",
                    "polyline",
                    "to_stop",
                    "to_stop_name"
                ]
            },
            "RouteSegmentRequest": {
                "type": "object",
                "description": "Serializer for route segments.",
                "properties": {
                    "from_stop": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "to_stop": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "polyline": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Encoded polyline for the route segment"
                    },
                    "distance": {
                        "type": "number",
                        "format": "double",
                        "description": "Distance in kilometers"
                    },
                    "duration": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "description": "Estimated duration in minutes"
                    }
                },
                "required": [
                    "distance",
                    "duration",
                    "from_stop",
                    "polyline",
                    "to_stop"
                ]
            },
            "RouteVisualization": {
                "type": "object",
                "description": "Serializer for route visualization data.",
                "properties": {
                    "line": {
                        "type": "object",
                        "additionalProperties": {}
                    },
                    "route": {
                        "type": "object",
                        "additionalProperties": {}
                    },
                    "markers": {
                        "type": "array",
                        "items": {}
                    },
                    "active_buses": {
                        "type": "array",
                        "items": {}
                    },
                    "bounds": {
                        "type": "object",
                        "additionalProperties": {},
                        "nullable": true
                    },
                    "last_updated": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "active_buses",
                    "bounds",
                    "last_updated",
                    "line",
                    "markers",
                    "route"
                ]
            },
            "Schedule": {
                "type": "object",
                "description": "Serializer for schedules.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "line": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "day_of_week": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/DayOfWeekEnum"
                            }
                        ],
                        "minimum": 0,
                        "maximum": 32767
                    },
                    "start_time": {
                        "type": "string",
                        "format": "time"
                    },
                    "end_time": {
                        "type": "string",
                        "format": "time"
                    },
                    "is_active": {
                        "type": "boolean",
                        "title": "Active"
                    },
                    "frequency_minutes": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0,
                        "description": "Bus frequency in minutes during this schedule"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "created_at",
                    "day_of_week",
                    "end_time",
                    "frequency_minutes",
                    "id",
                    "line",
                    "start_time",
                    "updated_at"
                ]
            },
            "ScheduleCreate": {
                "type": "object",
                "description": "Serializer for creating schedules.",
                "properties": {
                    "day_of_week": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/DayOfWeekEnum"
                            }
                        ],
                        "minimum": 0,
                        "maximum": 32767
                    },
                    "start_time": {
                        "type": "string",
                        "format": "time"
                    },
                    "end_time": {
                        "type": "string",
                        "format": "time"
                    },
                    "frequency_minutes": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0,
                        "description": "Bus frequency in minutes during this schedule"
                    }
                },
                "required": [
                    "day_of_week",
                    "end_time",
                    "frequency_minutes",
                    "start_time"
                ]
            },
            "ScheduleCreateRequest": {
                "type": "object",
                "description": "Serializer for creating schedules.",
                "properties": {
                    "day_of_week": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/DayOfWeekEnum"
                            }
                        ],
                        "minimum": 0,
                        "maximum": 32767
                    },
                    "start_time": {
                        "type": "string",
                        "format": "time"
                    },
                    "end_time": {
                        "type": "string",
                        "format": "time"
                    },
                    "frequency_minutes": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0,
                        "description": "Bus frequency in minutes during this schedule"
                    }
                },
                "required": [
                    "day_of_week",
                    "end_time",
                    "frequency_minutes",
                    "start_time"
                ]
            },
            "ScheduleRequest": {
                "type": "object",
                "description": "Serializer for schedules.",
                "properties": {
                    "line": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "day_of_week": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/DayOfWeekEnum"
                            }
                        ],
                        "minimum": 0,
                        "maximum": 32767
                    },
                    "start_time": {
                        "type": "string",
                        "format": "time"
                    },
                    "end_time": {
                        "type": "string",
                        "format": "time"
                    },
                    "is_active": {
                        "type": "boolean",
                        "title": "Active"
                    },
                    "frequency_minutes": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0,
                        "description": "Bus frequency in minutes during this schedule"
                    }
                },
                "required": [
                    "day_of_week",
                    "end_time",
                    "frequency_minutes",
                    "line",
                    "start_time"
                ]
            },
            "SeverityEnum": {
                "enum": [
                    "low",
                    "medium",
                    "high"
                ],
                "type": "string",
                "description": "* `low` - Low\n* `medium` - Medium\n* `high` - High"
            },
            "StartTracking": {
                "type": "object",
                "description": "Serializer for starting tracking.",
                "properties": {
                    "line_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "required": [
                    "line_id"
                ]
            },
            "StartTrackingRequest": {
                "type": "object",
                "description": "Serializer for starting tracking.",
                "properties": {
                    "line_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "required": [
                    "line_id"
                ]
            },
            "StatusF64Enum": {
                "enum": [
                    "active",
                    "inactive",
                    "maintenance"
                ],
                "type": "string",
                "description": "* `active` - Active\n* `inactive` - Inactive\n* `maintenance` - Maintenance"
            },
            "Stop": {
                "type": "object",
                "description": "Serializer for stops.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "latitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$"
                    },
                    "longitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$"
                    },
                    "address": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "is_active": {
                        "type": "boolean",
                        "title": "Active"
                    },
                    "description": {
                        "type": "string"
                    },
                    "features": {
                        "description": "Features of the stop (shelter, bench, etc.)"
                    },
                    "photo": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "created_at",
                    "id",
                    "latitude",
                    "longitude",
                    "name",
                    "updated_at"
                ]
            },
            "StopBrief": {
                "type": "object",
                "description": "Brief serializer for stops.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "latitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$"
                    },
                    "longitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$"
                    }
                },
                "required": [
                    "id",
                    "latitude",
                    "longitude",
                    "name"
                ]
            },
            "StopBriefRequest": {
                "type": "object",
                "description": "Brief serializer for stops.",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "latitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$"
                    },
                    "longitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$"
                    }
                },
                "required": [
                    "latitude",
                    "longitude",
                    "name"
                ]
            },
            "StopCreate": {
                "type": "object",
                "description": "Serializer for creating stops.",
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "latitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$"
                    },
                    "longitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$"
                    },
                    "address": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "description": {
                        "type": "string"
                    },
                    "features": {
                        "description": "Features of the stop (shelter, bench, etc.)"
                    },
                    "photo": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true
                    }
                },
                "required": [
                    "latitude",
                    "longitude",
                    "name"
                ]
            },
            "StopCreateRequest": {
                "type": "object",
                "description": "Serializer for creating stops.",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "latitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$"
                    },
                    "longitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$"
                    },
                    "address": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "description": {
                        "type": "string"
                    },
                    "features": {
                        "description": "Features of the stop (shelter, bench, etc.)"
                    },
                    "photo": {
                        "type": "string",
                        "format": "binary",
                        "nullable": true
                    }
                },
                "required": [
                    "latitude",
                    "longitude",
                    "name"
                ]
            },
            "StopLocation": {
                "type": "object",
                "description": "Serializer for stop location data.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "location": {
                        "type": "object",
                        "additionalProperties": {},
                        "readOnly": true
                    },
                    "order": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "estimated_arrival": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true
                    },
                    "distance_km": {
                        "type": "number",
                        "format": "double",
                        "readOnly": true,
                        "nullable": true
                    },
                    "travel_time_minutes": {
                        "type": "integer",
                        "readOnly": true,
                        "nullable": true
                    }
                },
                "required": [
                    "distance_km",
                    "estimated_arrival",
                    "id",
                    "location",
                    "name",
                    "order",
                    "travel_time_minutes"
                ]
            },
            "StopUpdate": {
                "type": "object",
                "description": "Serializer for updating stops.",
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "latitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$"
                    },
                    "longitude": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,7})?$"
                    },
                    "address": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "is_active": {
                        "type": "boolean",
                        "title": "Active"
                    },
                    "description": {
                        "type": "string"
                    },
                    "features": {
                        "description": "Features of the stop (shelter, bench, etc.)"
                    },
                    "photo": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true
                    }
                },
                "required": [
                    "latitude",
                    "longitude",
                    "name"
                ]
            },
            "SyncQueue": {
                "type": "object",
                "description": "Serializer for sync queue items.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "action_type": {
                        "$ref": "#/components/schemas/SyncQueueActionTypeEnum"
                    },
                    "model_name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "object_id": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 100
                    },
                    "data": {
                        "title": "Action data"
                    },
                    "status": {
                        "$ref": "#/components/schemas/SyncQueueStatusEnum"
                    },
                    "attempts": {
                        "type": "integer",
                        "readOnly": true,
                        "title": "Sync attempts"
                    },
                    "last_attempt_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true,
                        "title": "Last attempt time"
                    },
                    "completed_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true
                    },
                    "error_message": {
                        "type": "string",
                        "readOnly": true
                    },
                    "priority": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "description": "Higher values are synced first"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "action_type",
                    "attempts",
                    "completed_at",
                    "created_at",
                    "data",
                    "error_message",
                    "id",
                    "last_attempt_at",
                    "model_name",
                    "updated_at"
                ]
            },
            "SyncQueueActionTypeEnum": {
                "enum": [
                    "create",
                    "update",
                    "delete"
                ],
                "type": "string",
                "description": "* `create` - Create\n* `update` - Update\n* `delete` - Delete"
            },
            "SyncQueueRequest": {
                "type": "object",
                "description": "Serializer for sync queue items.",
                "properties": {
                    "action_type": {
                        "$ref": "#/components/schemas/SyncQueueActionTypeEnum"
                    },
                    "model_name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    },
                    "object_id": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 100
                    },
                    "data": {
                        "title": "Action data"
                    },
                    "status": {
                        "$ref": "#/components/schemas/SyncQueueStatusEnum"
                    },
                    "priority": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "description": "Higher values are synced first"
                    }
                },
                "required": [
                    "action_type",
                    "data",
                    "model_name"
                ]
            },
            "SyncQueueStatusEnum": {
                "enum": [
                    "pending",
                    "syncing",
                    "completed",
                    "failed"
                ],
                "type": "string",
                "description": "* `pending` - Pending\n* `syncing` - Syncing\n* `completed` - Completed\n* `failed` - Failed"
            },
            "SyncRequest": {
                "type": "object",
                "description": "Serializer for sync request.",
                "properties": {
                    "force": {
                        "type": "boolean",
                        "default": false,
                        "description": "Force sync even if cache is not expired"
                    }
                }
            },
            "SyncRequestRequest": {
                "type": "object",
                "description": "Serializer for sync request.",
                "properties": {
                    "force": {
                        "type": "boolean",
                        "default": false,
                        "description": "Force sync even if cache is not expired"
                    }
                }
            },
            "TokenRefresh": {
                "type": "object",
                "properties": {
                    "access": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "required": [
                    "access"
                ]
            },
            "TokenRefreshRequest": {
                "type": "object",
                "properties": {
                    "refresh": {
                        "type": "string",
                        "writeOnly": true,
                        "minLength": 1
                    }
                },
                "required": [
                    "refresh"
                ]
            },
            "TokenVerifyRequest": {
                "type": "object",
                "properties": {
                    "token": {
                        "type": "string",
                        "writeOnly": true,
                        "minLength": 1
                    }
                },
                "required": [
                    "token"
                ]
            },
            "TrackingStatusEnum": {
                "enum": [
                    "idle",
                    "active",
                    "paused"
                ],
                "type": "string",
                "description": "* `idle` - Idle\n* `active` - Active\n* `paused` - Paused"
            },
            "TrafficCondition": {
                "type": "object",
                "description": "Serializer for traffic conditions.",
                "properties": {
                    "level": {
                        "type": "string"
                    },
                    "factor": {
                        "type": "number",
                        "format": "double"
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "required": [
                    "description",
                    "factor",
                    "level"
                ]
            },
            "TransactionTypeEnum": {
                "enum": [
                    "trip_complete",
                    "achievement",
                    "daily_bonus",
                    "streak_bonus",
                    "referral",
                    "special_event",
                    "penalty"
                ],
                "type": "string",
                "description": "* `trip_complete` - Trip Completed\n* `achievement` - Achievement Unlocked\n* `daily_bonus` - Daily Bonus\n* `streak_bonus` - Streak Bonus\n* `referral` - Referral Bonus\n* `special_event` - Special Event\n* `penalty` - Penalty"
            },
            "Trip": {
                "type": "object",
                "description": "Serializer for trips.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "bus": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "bus_details": {
                        "type": "object",
                        "additionalProperties": {},
                        "description": "Get bus details if expand_bus is True.",
                        "readOnly": true
                    },
                    "driver": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "driver_details": {
                        "type": "object",
                        "additionalProperties": {},
                        "description": "Get driver details if expand_driver is True.",
                        "readOnly": true
                    },
                    "line": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "line_details": {
                        "type": "object",
                        "additionalProperties": {},
                        "description": "Get line details if expand_line is True.",
                        "readOnly": true
                    },
                    "start_time": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "end_time": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "start_stop": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "end_stop": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "is_completed": {
                        "type": "boolean",
                        "readOnly": true,
                        "title": "Completed"
                    },
                    "distance": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,8}(?:\\.\\d{0,2})?$",
                        "readOnly": true,
                        "nullable": true,
                        "description": "Distance traveled in km"
                    },
                    "average_speed": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,3}(?:\\.\\d{0,2})?$",
                        "readOnly": true,
                        "nullable": true,
                        "description": "Average speed in km/h"
                    },
                    "max_passengers": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Maximum number of passengers during the trip"
                    },
                    "total_stops": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Total number of stops made"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "average_speed",
                    "bus",
                    "bus_details",
                    "created_at",
                    "distance",
                    "driver",
                    "driver_details",
                    "id",
                    "is_completed",
                    "line",
                    "line_details",
                    "max_passengers",
                    "start_time",
                    "total_stops",
                    "updated_at"
                ]
            },
            "TripBrief": {
                "type": "object",
                "description": "Brief serializer for trips.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "bus_number": {
                        "type": "string",
                        "readOnly": true
                    },
                    "line_name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "start_time": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "end_time": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    }
                },
                "required": [
                    "bus_number",
                    "id",
                    "line_name",
                    "start_time"
                ]
            },
            "TripBriefRequest": {
                "type": "object",
                "description": "Brief serializer for trips.",
                "properties": {
                    "start_time": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "end_time": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    }
                },
                "required": [
                    "start_time"
                ]
            },
            "TripCreate": {
                "type": "object",
                "description": "Serializer for creating trips.",
                "properties": {
                    "bus": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "driver": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "line": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "start_time": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "start_stop": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "notes": {
                        "type": "string"
                    }
                },
                "required": [
                    "bus",
                    "driver",
                    "line",
                    "start_time"
                ]
            },
            "TripCreateRequest": {
                "type": "object",
                "description": "Serializer for creating trips.",
                "properties": {
                    "bus": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "driver": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "line": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "start_time": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "start_stop": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "notes": {
                        "type": "string"
                    }
                },
                "required": [
                    "bus",
                    "driver",
                    "line",
                    "start_time"
                ]
            },
            "TripInfo": {
                "type": "object",
                "description": "Serializer for trip information.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "line": {
                        "type": "string"
                    },
                    "started_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "progress": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "id",
                    "line",
                    "progress",
                    "started_at"
                ]
            },
            "TripRequest": {
                "type": "object",
                "description": "Serializer for trips.",
                "properties": {
                    "bus": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "driver": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "line": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "start_time": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "end_time": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "start_stop": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "end_stop": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "notes": {
                        "type": "string"
                    }
                },
                "required": [
                    "bus",
                    "driver",
                    "line",
                    "start_time"
                ]
            },
            "TripUpdate": {
                "type": "object",
                "description": "Serializer for updating trips.",
                "properties": {
                    "end_time": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "end_stop": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "notes": {
                        "type": "string"
                    }
                }
            },
            "TypeEnum": {
                "enum": [
                    "speed",
                    "route",
                    "schedule",
                    "passengers",
                    "gap",
                    "bunching",
                    "other"
                ],
                "type": "string",
                "description": "* `speed` - Speed anomaly\n* `route` - Route deviation\n* `schedule` - Schedule deviation\n* `passengers` - Unusual passenger count\n* `gap` - Service gap\n* `bunching` - Bus bunching\n* `other` - Other"
            },
            "UpdateStopOrder": {
                "type": "object",
                "description": "Serializer for updating a stop's order in a line.",
                "properties": {
                    "stop_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "new_order": {
                        "type": "integer",
                        "minimum": 0
                    }
                },
                "required": [
                    "new_order",
                    "stop_id"
                ]
            },
            "UpdateStopOrderRequest": {
                "type": "object",
                "description": "Serializer for updating a stop's order in a line.",
                "properties": {
                    "stop_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "new_order": {
                        "type": "integer",
                        "minimum": 0
                    }
                },
                "required": [
                    "new_order",
                    "stop_id"
                ]
            },
            "User": {
                "type": "object",
                "description": "Serializer for users.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "readOnly": true,
                        "title": "Email address"
                    },
                    "first_name": {
                        "type": "string",
                        "maxLength": 150
                    },
                    "last_name": {
                        "type": "string",
                        "maxLength": 150
                    },
                    "phone_number": {
                        "type": "string",
                        "maxLength": 20
                    },
                    "user_type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/UserTypeEnum"
                            }
                        ],
                        "readOnly": true
                    },
                    "is_active": {
                        "type": "boolean",
                        "title": "Active",
                        "description": "Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
                    },
                    "date_joined": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "profile": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Profile"
                            }
                        ],
                        "readOnly": true
                    }
                },
                "required": [
                    "date_joined",
                    "email",
                    "id",
                    "profile",
                    "user_type"
                ]
            },
            "UserBrief": {
                "type": "object",
                "description": "Brief serializer for users.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "title": "Email address",
                        "maxLength": 254
                    },
                    "full_name": {
                        "type": "string",
                        "description": "Get user's full name.",
                        "readOnly": true
                    },
                    "user_type": {
                        "$ref": "#/components/schemas/UserTypeEnum"
                    }
                },
                "required": [
                    "email",
                    "full_name",
                    "id"
                ]
            },
            "UserBriefRequest": {
                "type": "object",
                "description": "Brief serializer for users.",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "minLength": 1,
                        "title": "Email address",
                        "maxLength": 254
                    },
                    "user_type": {
                        "$ref": "#/components/schemas/UserTypeEnum"
                    }
                },
                "required": [
                    "email"
                ]
            },
            "UserCache": {
                "type": "object",
                "description": "Serializer for user cache.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "last_sync_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "title": "Last sync time"
                    },
                    "cache_size_bytes": {
                        "type": "integer",
                        "readOnly": true,
                        "title": "Cache size (bytes)"
                    },
                    "cache_size_mb": {
                        "type": "string",
                        "readOnly": true
                    },
                    "cache_version": {
                        "type": "string",
                        "maxLength": 20
                    },
                    "is_syncing": {
                        "type": "boolean"
                    },
                    "sync_progress": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "title": "Sync progress (%)"
                    },
                    "last_error": {
                        "type": "string",
                        "title": "Last sync error"
                    },
                    "cached_lines_count": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648
                    },
                    "cached_stops_count": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648
                    },
                    "cached_schedules_count": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648
                    },
                    "is_expired": {
                        "type": "string",
                        "readOnly": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "cache_size_bytes",
                    "cache_size_mb",
                    "created_at",
                    "id",
                    "is_expired",
                    "updated_at"
                ]
            },
            "UserCacheRequest": {
                "type": "object",
                "description": "Serializer for user cache.",
                "properties": {
                    "last_sync_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "title": "Last sync time"
                    },
                    "cache_version": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 20
                    },
                    "is_syncing": {
                        "type": "boolean"
                    },
                    "sync_progress": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648,
                        "title": "Sync progress (%)"
                    },
                    "last_error": {
                        "type": "string",
                        "title": "Last sync error"
                    },
                    "cached_lines_count": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648
                    },
                    "cached_stops_count": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648
                    },
                    "cached_schedules_count": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": -2147483648
                    }
                }
            },
            "UserCreate": {
                "type": "object",
                "description": "Serializer for creating users.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "title": "Email address",
                        "maxLength": 254
                    },
                    "first_name": {
                        "type": "string",
                        "maxLength": 150
                    },
                    "last_name": {
                        "type": "string",
                        "maxLength": 150
                    },
                    "phone_number": {
                        "type": "string",
                        "maxLength": 20
                    },
                    "user_type": {
                        "$ref": "#/components/schemas/UserTypeEnum"
                    }
                },
                "required": [
                    "email",
                    "id"
                ]
            },
            "UserCreateRequest": {
                "type": "object",
                "description": "Serializer for creating users.",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "minLength": 1,
                        "title": "Email address",
                        "maxLength": 254
                    },
                    "first_name": {
                        "type": "string",
                        "maxLength": 150
                    },
                    "last_name": {
                        "type": "string",
                        "maxLength": 150
                    },
                    "phone_number": {
                        "type": "string",
                        "maxLength": 20
                    },
                    "user_type": {
                        "$ref": "#/components/schemas/UserTypeEnum"
                    },
                    "password": {
                        "type": "string",
                        "writeOnly": true,
                        "minLength": 1
                    },
                    "confirm_password": {
                        "type": "string",
                        "writeOnly": true,
                        "minLength": 1
                    }
                },
                "required": [
                    "confirm_password",
                    "email",
                    "password"
                ]
            },
            "UserProfile": {
                "type": "object",
                "description": "Serializer for UserProfile model.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "user": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/UserBrief"
                            }
                        ],
                        "readOnly": true
                    },
                    "total_points": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "current_level": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "experience_points": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "next_level_points": {
                        "type": "integer",
                        "description": "Points needed for next level.",
                        "readOnly": true
                    },
                    "level_progress": {
                        "type": "integer",
                        "description": "Progress percentage to next level.",
                        "readOnly": true
                    },
                    "total_trips": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "total_distance": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,8}(?:\\.\\d{0,2})?$",
                        "readOnly": true
                    },
                    "carbon_saved": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^-?\\d{0,8}(?:\\.\\d{0,2})?$",
                        "readOnly": true,
                        "title": "Carbon saved (kg)"
                    },
                    "current_streak": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "longest_streak": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "last_trip_date": {
                        "type": "string",
                        "format": "date",
                        "readOnly": true,
                        "nullable": true
                    },
                    "receive_achievement_notifications": {
                        "type": "boolean"
                    },
                    "display_on_leaderboard": {
                        "type": "boolean"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "carbon_saved",
                    "created_at",
                    "current_level",
                    "current_streak",
                    "experience_points",
                    "id",
                    "last_trip_date",
                    "level_progress",
                    "longest_streak",
                    "next_level_points",
                    "total_distance",
                    "total_points",
                    "total_trips",
                    "updated_at",
                    "user"
                ]
            },
            "UserProfileRequest": {
                "type": "object",
                "description": "Serializer for UserProfile model.",
                "properties": {
                    "receive_achievement_notifications": {
                        "type": "boolean"
                    },
                    "display_on_leaderboard": {
                        "type": "boolean"
                    }
                }
            },
            "UserRequest": {
                "type": "object",
                "description": "Serializer for users.",
                "properties": {
                    "first_name": {
                        "type": "string",
                        "maxLength": 150
                    },
                    "last_name": {
                        "type": "string",
                        "maxLength": 150
                    },
                    "phone_number": {
                        "type": "string",
                        "maxLength": 20
                    },
                    "is_active": {
                        "type": "boolean",
                        "title": "Active",
                        "description": "Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
                    }
                }
            },
            "UserTypeEnum": {
                "enum": [
                    "admin",
                    "driver",
                    "passenger"
                ],
                "type": "string",
                "description": "* `admin` - Admin\n* `driver` - Driver\n* `passenger` - Passenger"
            },
            "UserUpdate": {
                "type": "object",
                "description": "Serializer for updating users.",
                "properties": {
                    "first_name": {
                        "type": "string",
                        "maxLength": 150
                    },
                    "last_name": {
                        "type": "string",
                        "maxLength": 150
                    },
                    "phone_number": {
                        "type": "string",
                        "maxLength": 20
                    }
                }
            },
            "WaitingPassengers": {
                "type": "object",
                "description": "Serializer for waiting passengers.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "stop": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "stop_details": {
                        "type": "object",
                        "additionalProperties": {},
                        "description": "Get stop details if expand_stop is True.",
                        "readOnly": true
                    },
                    "line": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "count": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0
                    },
                    "reported_by": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "count",
                    "created_at",
                    "id",
                    "stop",
                    "stop_details",
                    "updated_at"
                ]
            },
            "WaitingPassengersCreate": {
                "type": "object",
                "description": "Serializer for creating waiting passengers.",
                "properties": {
                    "stop": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "line": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "count": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0
                    }
                },
                "required": [
                    "count",
                    "stop"
                ]
            },
            "WaitingPassengersCreateRequest": {
                "type": "object",
                "description": "Serializer for creating waiting passengers.",
                "properties": {
                    "stop": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "line": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "count": {
                        "type": "integer",
                        "maximum": 32767,
                        "minimum": 0
                    }
                },
                "required": [
                    "count",
                    "stop"
                ]
            }
        },
        "securitySchemes": {
            "cookieAuth": {
                "type": "apiKey",
                "in": "cookie",
                "name": "sessionid"
            },
            "jwtAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }
    }
}