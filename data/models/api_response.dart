/// lib/data/models/api_response.dart

import 'package:freezed_annotation/freezed_annotation.dart';

// Required part files for code generation. Run `flutter pub run build_runner build --delete-conflicting-outputs`
part 'api_response.freezed.dart';
part 'api_response.g.dart';

/// A generic wrapper class representing paginated list responses from the API.
///
/// This structure matches the common pattern used in the backend API where lists
/// are returned with count, next/previous links, and the actual data in 'results'.
/// Type [T] represents the type of the data model contained within the 'results' list.
@Freezed(genericArgumentFactories: true) // Needed for generic toJson/fromJson generation
class ApiResponse<T> with _$ApiResponse<T> {
  /// Creates an instance of ApiResponse.
  ///
  /// Requires:
  /// - [count]: Total number of items available across all pages.
  /// - [results]: A list of items of type [T] for the current page.
  ///
  /// Optional:
  /// - [next]: URL string for the next page of results, or null if none.
  /// - [previous]: URL string for the previous page of results, or null if none.
  const factory ApiResponse({
    required int count,
    required String? next,
    required String? previous,
    required List<T> results,
  }) = _ApiResponse<T>;

  /// Creates an ApiResponse instance from a JSON map.
  ///
  /// This factory requires a `fromJsonT` function that knows how to
  /// deserialize a single item of type [T] from its JSON representation.
  ///
  /// Example usage:
  /// ```dart
  /// final paginatedLines = ApiResponse<LineModel>.fromJson(
  ///   jsonData,
  ///   (json) => LineModel.fromJson(json as Map<String, dynamic>),
  /// );
  /// ```
  factory ApiResponse.fromJson(
    Map<String, dynamic> json,
    // Function signature required by freezed/json_serializable for generic types
    T Function(Object? json) fromJsonT,
  ) =>
      _$ApiResponseFromJson<T>(json, fromJsonT);

  // Note: A default toJson method is generated by freezed/json_serializable
  // if the genericArgumentFactories: true flag is set. It requires a `toJsonT`
  // function to be passed if you need to serialize it back with the generic type.
  // Map<String, dynamic> toJson(Object? Function(T value) toJsonT) =>
  //     _$ApiResponseToJson<T>(this, toJsonT);
}

// While freezed handles the fromJson factory generation with the helper function,
// json_serializable might still require an explicit JsonConverter annotation
// on the `results` field if issues arise during generation, especially for complex T.
// However, with `genericArgumentFactories: true`, this helper converter below
// might not be strictly necessary *on the field itself*, as the fromJsonT/toJsonT
// functions passed to the main factory handle the conversion. It's kept here
// for reference or if explicit field conversion is needed later.

// /// Helper converter needed for Freezed/json_serializable with generic lists IF NEEDED.
// /// Typically used with `@_Converter()` annotation on the `results` field.
// /// With `genericArgumentFactories: true`, this might be redundant.
// class _Converter<T> implements JsonConverter<T, Object?> {
//   const _Converter();
//
//   @override
//   T fromJson(Object? json) {
//     // This should ideally not be called directly for list items if using
//     // the generic factory with fromJsonT. The factory handles item conversion.
//     // If T itself is complex (e.g. List<Map>), further handling might be needed.
//     if (json == null) throw Exception('Cannot convert null json to type $T');
//     // This assumes the passed `fromJsonT` in the main factory handles the conversion.
//     // Returning json directly here might be incorrect.
//     // Consider throwing an error if this is reached unexpectedly.
//     // throw UnimplementedError('Direct conversion in _Converter should not be needed with genericArgumentFactories');
//     // Or, if absolutely necessary, try a generic cast (potentially unsafe):
//     try {
//       return json as T;
//     } catch (e) {
//        throw Exception('Failed to cast json to type $T in _Converter: $e');
//     }
//   }
//
//   @override
//   Object? toJson(T object) {
//     // toJson support for generic T requires specific logic or passing toJsonT
//     // to the main toJson method generated by freezed.
//     return object; // Default pass-through might not serialize nested objects correctly.
//   }
// }

